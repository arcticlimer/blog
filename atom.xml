<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://viniciusmuller.github.io/blog</id>
  <title>Vinícius Müller&#x27;s blog</title>
  <updated>2023-05-29T00:00:00+00:00</updated>
  <author>
    <name>Vinícius Müller</name>
  </author>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/hashicorp-nomad-setup.html</id>
      <title>HashiCorp Nomad Setup</title>
      <updated>2023-02-07T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;I like HashiCorp&#x27;s products, and wanted to try running a cluster with some of
them in order to learn more about and build stuff using it. The first one on the
list is Nomad, which this post will cover how to setup it in a single Debian
node and create a cluster. Most of the commands shown here are aggregated and
adapted from the referenced HashiCorp documentation pages.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#install-nomad&quot;&gt;
              &lt;h1 id=&quot;install-nomad&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Install Nomad&lt;/h1&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Add HashiCorp&#x27;s repository
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install wget gpg coreutils wget lsb-release
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo &amp;quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&amp;quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list

# Install nomad
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install nomad

# Nomad directories and user setup
sudo mkdir -p /opt/nomad
sudo useradd --system --home /etc/nomad.d --shell /bin/false nomad
sudo chown -R nomad /opt/nomad

# Install Docker (optional if you do not pretend to run containers or use podman)
sudo apt-get install docker.io
sudo usermod -G docker -a nomad
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For post-installation steps, such as setting up CNI plugins or Vagrant, refer to
the &lt;a href=&quot;https://developer.hashicorp.com/nomad/tutorials/get-started/get-started-install#post-installation-steps&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#setup-the-nomad-agent-unit&quot;&gt;
              &lt;h1 id=&quot;setup-the-nomad-agent-unit&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Setup the Nomad Agent Unit&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Add the following content into &lt;code&gt;/etc/systemd/system/nomad.service&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[Unit]
Description=Nomad
Documentation=https://www.nomadproject.io/docs/
Wants=network-online.target
After=network-online.target

[Service]

# Nomad server should be run as the nomad user. Nomad clients
# should be run as root
User=nomad
Group=nomad

ExecReload=/bin/kill -HUP $MAINPID
ExecStart=/bin/nomad agent -config /etc/nomad.d
KillMode=process
KillSignal=SIGINT
LimitNOFILE=65536
LimitNPROC=infinity
Restart=on-failure
RestartSec=2
TasksMax=infinity
OOMScoreAdjust=-1000

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable and start the Nomad systemd service by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo systemctl enable nomad
sudo systemctl start nomad
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#nomad-config&quot;&gt;
              &lt;h1 id=&quot;nomad-config&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Nomad Config&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Add the following content into &lt;code&gt;/etc/nomad.d/nomad.hcl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-hcl&quot;&gt;# Full configuration options can be found at https://www.nomadproject.io/docs/configuration

datacenter = &amp;quot;dc1&amp;quot;

data_dir = &amp;quot;/opt/nomad&amp;quot;
bind_addr = &amp;quot;0.0.0.0&amp;quot;

server {
  enabled = true
}

client {
  enabled = true
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#running-a-job&quot;&gt;
              &lt;h1 id=&quot;running-a-job&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Running a Job&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Note that this job requires docker to be installed in the host.&lt;/p&gt;
&lt;p&gt;Add the following content in a &lt;code&gt;first-job.nomad&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-hcl&quot;&gt;job &amp;quot;rabbit&amp;quot; {
  datacenters = [&amp;quot;dc1&amp;quot;]

  group &amp;quot;rabbitmq&amp;quot; {
    network {
      port &amp;quot;rabbit&amp;quot; {
        to = 5672
      }

      port &amp;quot;management&amp;quot; {
        to = 15672
      }
    }

    task &amp;quot;rabbit&amp;quot; {
      driver = &amp;quot;docker&amp;quot;

      config {
        image = &amp;quot;rabbitmq:3-management&amp;quot;
        ports = [&amp;quot;rabbit&amp;quot;, &amp;quot;management&amp;quot;]
        auth_soft_fail = true
      }

      resources {
        cpu = 500
        memory = 512
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then do a dry run of the deployment by running &lt;code&gt;nomad job plan first-job.nomad&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If everything went well, Nomad will tell you it can create the deployment
succesfully and show you the command to start the process. You can then run this
command, wait until it finishes and check the results the &lt;code&gt;Jobs&lt;/code&gt; section inside
&lt;a href=&quot;127.0.0.1:4646&quot;&gt;Nomad&#x27;s web interface&lt;/a&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#clustering-with-consul&quot;&gt;
              &lt;h1 id=&quot;clustering-with-consul&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Clustering with Consul&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;In order to create a cluster with our own nodes, we will leverage the existing
Nomad + Consul integration for service discovery. Add the following section to
every Nomad node you want to connect to the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-hcl&quot;&gt;# Inside the server block, add bootstrap_expect with the number of nodes that
# you will run in your cluster
server {
  bootstrap_expect = 3
}

consul {
  # The address to the Consul Agent
  address = &amp;quot;consul-ip:5000&amp;quot;

  # The service name to register the server and client with Consul
  server_service_name = &amp;quot;nomad&amp;quot;
  client_service_name = &amp;quot;nomad-client&amp;quot;

  # Enables automatically registering the services
  auto_advertise = true

  # Enabling the server and client to bootstrap using consul
  server_auto_join = true
  client_auto_join = true
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#wrapping-up&quot;&gt;
              &lt;h1 id=&quot;wrapping-up&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Wrapping up&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Nomad is an awesome scheduler and orchestrator, and it is being pretty
refreshing using its simple API in order to get started learning about
orchestrators. I hope this post helps some curious readers and my future self
when setting Nomad up.&lt;/p&gt;
&lt;p&gt;In order to continue learning about Nomad, check &lt;a href=&quot;https://developer.hashicorp.com/nomad/docs&quot;&gt;HashiCorp&#x27;s
docs&lt;/a&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/nomad/tutorials/get-started/get-started-install&quot;&gt;Install Nomad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/nomad/tutorials/enterprise/production-deployment-guide-vm-with-consul&quot;&gt;Nomad Deployment Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/nomad/tutorials/get-started/get-started-run&quot;&gt;Start Nomad and Run Your First Job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/nomad/tutorials/manage-clusters/clustering&quot;&gt;Connect Nodes into a Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/hashicorp-nomad-setup.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/fable-react-interop-guide.html</id>
      <title>Fable + React Interop Guide</title>
      <updated>2023-01-25T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;F# has a pretty good interoperability with Javascript when using the Fable
library. When building user interfaces using React, there are multiple
alternatives, but the necessary resources to build solutions using Fable seem
scattered around the internet.&lt;/p&gt;
&lt;p&gt;This document aims to provide a solid getting started to both Fable and Feliz,
and how to use both in order to interoperate F# with an existing React library.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#fable&quot;&gt;
              &lt;h1 id=&quot;fable&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Fable&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://fable.io/&quot;&gt;Fable&lt;/a&gt; is a library that allows one to write F# code while
using existing web solutions in the Javascript ecossystem. It also allows one to
export libraries that can be called from Javascript code.&lt;/p&gt;
&lt;p&gt;As seen in &amp;quot;&lt;a href=&quot;https://fable.io/docs/communicate/js-from-fable.html&quot;&gt;Call JS from
Fable&lt;/a&gt;&amp;quot;, there are
multiple ways of importing generic JS objects into our project, this document
will use &lt;code&gt;ImportAttribute&lt;/code&gt; to import objects.&lt;/p&gt;
&lt;p&gt;Note that by default, we don&#x27;t have any types when importing and giving data to
JS objects, but we can easily add types on the F# side to have a type-safe
experience when developing with Fable, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// File.ts

interface MyInterface {
  name: string
  lastName: string
}

let myObject: MyInterface = {name: &amp;quot;john&amp;quot;, lastName: &amp;quot;bar&amp;quot;}

export const myObject;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// my-file.fs

type Interface = {
  name: string
  lastName: string
}

[&amp;lt;Import(&amp;quot;default&amp;quot;, from=&amp;quot;./my-file.js&amp;quot;)&amp;gt;]
let myObject: Interface = jsNative

// Now we can use myObject directly from JS in a type-safe way
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#feliz&quot;&gt;
              &lt;h1 id=&quot;feliz&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Feliz&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://zaid-ajaj.github.io/Feliz/&quot;&gt;Feliz&lt;/a&gt; is a library used to directly
interface React, adding the ability to create new type-safe components directly
by using F# or using already existing components defined in other languages.&lt;/p&gt;
&lt;p&gt;We can define new React components in F# using the &lt;code&gt;ReactComponent&lt;/code&gt; attribute,
for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;/// &amp;lt;summary&amp;gt;
/// A stateful React component that maintains a counter
/// &amp;lt;/summary&amp;gt;
[&amp;lt;ReactComponent&amp;gt;]
static member Counter() =
    let (count, setCount) = React.useState(0)
    Html.div [
        Html.h1 count
        Html.button [
            prop.onClick (fun _ -&amp;gt; setCount(count + 1))
            prop.text &amp;quot;Increment&amp;quot;
        ]
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to import existing components from other libraries, we also use
&lt;code&gt;&amp;lt;ReactComponent&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;ReactComponent(import=&amp;quot;default&amp;quot;, from=&amp;quot;react-markdown&amp;quot;)&amp;gt;]
static member Markdown(children: string, remarkPlugins: obj seq) = React.imported()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that in this case, we pass import=&amp;quot;default&amp;quot; since it is a default export,
when dealing with named exports, import should receive the name of the
exported value.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#asynchronous-f-code-in-feliz&quot;&gt;
              &lt;h1 id=&quot;asynchronous-f-code-in-feliz&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Asynchronous F# Code in Feliz&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Since callbacks can be asynchronous, we use React&#x27;s &lt;code&gt;useEffect&lt;/code&gt; to execute
our asynchronous F# code and set the data that we need using &lt;code&gt;useState&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example of a Feliz component that fetches products from a remote API
asynchronously and then renders them on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;ReactComponent&amp;gt;]
static member ApiCall() =
    let (products, setProducts) = React.useState([| |])

    let fetchProducts = async {
      let! products = fetch &amp;quot;/api/products&amp;quot;
      setProducts(products)
    } |&amp;gt; Async.StartImmediate

    React.useEffect(fetchProducts, [| |])

    let productElements = List.map products (fun p -&amp;gt; 
      Html.div [
        Html.h2 [
          prop.text p.name
        ]
        Html.p [
          prop.text p.description
        ]
      ]
    )

    Html.div productElements
&lt;/code&gt;&lt;/pre&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/fable-react-interop-guide.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/2023-readings.html</id>
      <title>2023 Readings</title>
      <updated>2023-01-20T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Instead of making a reading list this year, I will focus on writing summaries
about books that I&#x27;ve read and keep piling them up in this page, along with
the time period in which I&#x27;ve read them.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#the-little-ecto-cookbook-january-2023&quot;&gt;
              &lt;h1 id=&quot;the-little-ecto-cookbook-january-2023&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        The Little Ecto Cookbook (January 2023)&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;The &lt;em&gt;Little Ecto Cookbook&lt;/em&gt; is a short book that focus on leveraging less-known
features of &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.html&quot;&gt;Ecto&lt;/a&gt; when building systems that
use it. It shows how Ecto is non an &lt;em&gt;Object Relational Mapper&lt;/em&gt; (ORM) but rather
just a data mapper that happens to allow you to make queries in your database.
Ecto by itself can be very useful for validating user-inputted data, such as in
API controllers, even when you are not dealing with a database directly.&lt;/p&gt;
&lt;p&gt;It also shows how to make great use of transactions to improve error handling
and how Ecto queries can be composed in order to build specialized query on top
of generic ones. The book showcases different ways of handling database
relationships with Ecto and also introduces the concept of &lt;em&gt;upserts&lt;/em&gt; for dealing
with concurrency issues and functions such as &lt;code&gt;Repo.update_all&lt;/code&gt; for batch
updating/inserting different records.&lt;/p&gt;
&lt;p&gt;In the last chapters, it shows how multi-tenancy can be achieved in Ecto and
also how to setup it to read from different replicas.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#concurrent-data-processing-with-elixir-january-2023&quot;&gt;
              &lt;h1 id=&quot;concurrent-data-processing-with-elixir-january-2023&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Concurrent Data Processing with Elixir (January 2023)&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;This book is a really cool overview of how Elixir and the BEAM come into play
when the subject is leveraging hardware and CPU cores for maximum performance.
Even though the BEAM is not that fast, this book shows that is incredibly simple
to build simple and complex data processing pipelines that will use 100% of your
CPU if needed (no matter how many cores you have), while handling backpressure
to keep your machine running smooth.&lt;/p&gt;
&lt;p&gt;The book builds some small little projects while showcasing different libraries
for the user, making it a very interactive learning experience. It starts by
showing off processes, which are the basic building blocks of concurrency in the
BEAM and then proceeds to introduce Tasks, a very simple way of handling async
work that can be parallelized and after that introduces &lt;code&gt;GenStages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GenStages&lt;/code&gt; the basic building block that the next steps of the book build upon,
being a powerful abstraction to create a consumer-producer architecture, where
the data flow is managed by the consumers (who ask for the data when needed).&lt;/p&gt;
&lt;p&gt;Later on, the &lt;code&gt;Flow&lt;/code&gt; library is introduced, which is a library that works almost
as a drop-in replacement for the &lt;code&gt;Enum&lt;/code&gt; module and can use your entire CPU
capacity when working on large sequences of data.&lt;/p&gt;
&lt;p&gt;In the last chapter, the &lt;code&gt;Broadway&lt;/code&gt; library is shown as a powerful consumer for
multiple kinds of producers, such as messages brokers &lt;em&gt;(Kafka, RabbitMQ, SQS)&lt;/em&gt;
or even other &lt;code&gt;GenStage&lt;/code&gt; producers already in your codebase.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#domain-modelling-made-functional-february-2023&quot;&gt;
              &lt;h1 id=&quot;domain-modelling-made-functional-february-2023&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Domain Modelling Made Functional (February 2023)&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;This book by Scott Wlaschin provides a great introduction to the domain driven
design methodology, covering topics such as bounded contexts, event storming,
developing a ubiquitous language and focusing on business needs instead of
implementation details.&lt;/p&gt;
&lt;p&gt;Shows how to model business cases by using &lt;em&gt;algebraic data types&lt;/em&gt;, such as
product, sum and union types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type ProductCode = 
  | Legacy of int 
  | V2 of UUID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Types are used to model business workflows in a type-safe way, so that code will
not compile if someone breaks business logic (make illegal states
unrepresentable):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type UnvalidatedUser {
  name : string
  age : int
}

type ValidatedUser {
  name : string
  age : int
}

// validateUser :: UnvalidatedUser -&amp;gt; Result&amp;lt;ValidatedUser, ValidationError&amp;gt;
let validateUser = ...

// registerUser :: ValidatedUser -&amp;gt; RegisteredUser
let registerUser = ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By doing this we can ensure there will be no cases where an unvalidated user
will be mistakenly passed to the &lt;code&gt;registerUser&lt;/code&gt; function and the program would
compile, since the only way to get a &lt;code&gt;ValidatedUser&lt;/code&gt;, required by the registering
function would be by validating a user.&lt;/p&gt;
&lt;p&gt;Another great point is embracing total instead of partial functions. Exceptions
greatly complicate control flow and usually result types combined with monadic
computations lead to much simpler and cleaner code.&lt;/p&gt;
&lt;p&gt;The book also introduces the Onion architecture and the idea of creating a pure,
functional core and bumping I/O to the edges of your architecture, so that your
business logic makes the decisions and the I/O just executes these decisions,
leading to very testable code.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/2023-readings.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/fixing-manually-deleted-docker-volume.html</id>
      <title>Fixing manually deleted Docker volume</title>
      <updated>2023-01-04T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Let&#x27;s say you have a docker-compose file that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;version: &#x27;3.1&#x27;

services:

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: my_db
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432


volumes:
  db-data:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#x27;re not thinking straight or are not very experienced with docker, you may
delete your volume in order to clean it using something similar to the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo rm -rf /var/lib/docker/volumes/db-data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then you proceed to run your containers normally with docker compose,
and boom!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ docker compose up
[+] Running 1/0
 ⠿ Network default  Created                                                                                 0.0s
 ⠋ Container db-1   Creating                                                                                0.0s
Error response from daemon: open /var/lib/docker/volumes/db-data/_data: no such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can&#x27;t run our containers, what should we do!?&lt;/p&gt;
&lt;p&gt;Doing a quick google search, we see that docker compose has the following flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-V, --renew-anon-volumes   Recreate anonymous volumes instead of retrieving
                           data from the previous containers.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it seems that this battle is already won, but surprisingly, when using
&lt;strong&gt;docker v20.10.21&lt;/strong&gt; and &lt;strong&gt;docker-compose v2.14.0&lt;/strong&gt;, adding this flag to &lt;code&gt;docker compose up&lt;/code&gt; does nothing, the error still persists and no volume is recreated.&lt;/p&gt;
&lt;p&gt;The way that I&#x27;ve solved this is actually pretty stupid, but it works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo mkdir -p /var/lib/docker/volumes/db-data/_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creating these folders is already enough for &lt;code&gt;docker-compose&lt;/code&gt; to continue from
there and run our containers.&lt;/p&gt;
&lt;p&gt;And maybe the key takeway from this is to remember to use &lt;code&gt;docker volume rm&lt;/code&gt;
when wiping volumes, so we don&#x27;t run through this again.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/fixing-manually-deleted-docker-volume.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/solving-merge-conflicts.html</id>
      <title>Solving Merge Conflicts</title>
      <updated>2022-09-20T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;As I heard once, now I think handling merge conlficts is one of the most critical
parts of a project. If you don&#x27;t do it extremely carefully, you will end up
messing something up and having to &lt;em&gt;redo&lt;/em&gt; the conflict solving or waste some
nice time figuring out what did you do wrong when merging.&lt;/p&gt;
&lt;p&gt;So it&#x27;s really worth it to invest some extra time by paying attention and
double-checking what you&#x27;re doing the merging branches with conflicts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git-imerge&lt;/strong&gt; e&lt;em&gt;merges&lt;/em&gt; to solve that problem by providing an incremental way of
merging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start a merge with &lt;code&gt;git-imerge merge &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It will merge commits until conflicts arise, then solve the conflicts and run &lt;code&gt;git-imerge continue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Follow this loop until the program says the merge is complete, then run &lt;code&gt;git-imerge finish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my experience using it, it makes merging a bit slower, sometimes you end up
fixing almost the same commits but the overall experience is very incremental
and smooth.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/solving-merge-conflicts.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/recovering-from-broken-bootloader.html</id>
      <title>Recovering from broken bootloader</title>
      <updated>2022-09-18T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;NixOS provides some really nice properties, such as the ability to rollback your
config using a menu in the bootloader if you need. But what if there is no
bootloader? Recently the power went off when &lt;code&gt;nixos-rebuild switch&lt;/code&gt; was
rebuilding the bootloader and I got locked out of my PC.&lt;/p&gt;
&lt;p&gt;In order to repair that, there is no big secret: you will need just a live NixOS
USB. Then just mount your partitions and run from the ISO: &lt;code&gt;nixos-install --flake &amp;lt;path_to_your_config&amp;gt;&lt;/code&gt;, then Nix will already notice that all the
required packages are already in your nix store and will just fix your
bootloader.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/recovering-from-broken-bootloader.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/setting-zfs-mirrors-up-in-nixos.html</id>
      <title>Setting ZFS mirrors up in NixOS</title>
      <updated>2022-09-13T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#zfs&quot;&gt;
              &lt;h1 id=&quot;zfs&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        ZFS&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;ZFS is a modern file system that works with pool of different devices and allows
for redudancy, efficient snapshots, compression and deduplication.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#setup&quot;&gt;
              &lt;h1 id=&quot;setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Setup&lt;/h1&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: When experimenting with different partitioning schemas, if you happen
to create any pool or dataset using &lt;code&gt;zpool create&lt;/code&gt; or &lt;code&gt;zfs create&lt;/code&gt;, remember
to delete them before using the proper pool and dataset deletion commands before
repartitioning, otherwise you will get stuck with &amp;quot;phantom&amp;quot; ZFS pools that will
be very annoying to remove.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;POOL_NAME=main
DATASET_NAME=root
DISK_ONE=disk_one_path
DISK_TWO=disk_two_path

# Use cfdisk or some other tool to partition your disks.
# In my case I&#x27;ve created the following partition table in both disks:
# 100M BIOS Boot
# 4G Linux Swap
# Remaining space ZFS
cfdisk $DISK_ONE
cfdisk $DISK_TWO

zpool create -O mountpoint=none -O compression=lz4 $POOL_NAME mirror $DISK_ONE-part3 $DISK_TWO-part3
zfs create -o mountpoint=legacy $POOL_NAME/$DATASET_NAME

mkfs.vfat $DISK_ONE-part1
mkfs.vfat $DISK_TWO-part1

# Activate only one of these using `swapon`
mkswap $DISK_ONE-part2
mkswap $DISK_TWO-part2

swapon $DISK_ONE-part2

mount -t zfs $POOL_NAME/$DATASET_NAME /mnt
nixos-generate-config --root /mnt

# Tweak your configurations and install NixOS
nixos-install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to setup two boot partitions in NixOs, use the
&lt;code&gt;boot.loader.grub.devices&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;boot.loader.grub.devices = [ &amp;quot;/dev/sda&amp;quot; &amp;quot;/dev/sdb&amp;quot; ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if one of the disks die you will still be able to boot into your system.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#replacing-devices&quot;&gt;
              &lt;h1 id=&quot;replacing-devices&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Replacing devices&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Just a few days after doing the first installation, one of the hard drives being
used died. It was surprisingly easy to repair my mirror using some ZFS magic.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@nixos:~]# zpool status
  pool: main
 state: DEGRADED
status: One or more devices could not be used because the label is missing or
        invalid.  Sufficient replicas exist for the pool to continue
        functioning in a degraded state.
action: Replace the device using &#x27;zpool replace&#x27;.
   see: https://openzfs.github.io/openzfs-docs/msg/ZFS-8000-4J
config:

        NAME                              STATE     READ WRITE CKSUM
        main                              DEGRADED     0     0     0
          mirror-0                        DEGRADED     0     0     0
            &amp;lt;device_id&amp;gt;                   UNAVAIL      0     0     0  was /dev/disk/by-id/wwn-0x5000c5007b582f48-part3
            wwn-0x5000c50074fbe272-part3  ONLINE       0     0     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to repair a pool, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;zpool replace &amp;lt;pool&amp;gt; &amp;lt;device_id&amp;gt; &amp;lt;new_device_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then ZFS will start the resilvering process and your mirror will be ready again
some time later.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#samba&quot;&gt;
              &lt;h1 id=&quot;samba&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Samba&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Samba allows the server to be easily usable from both Windows and Linux clients.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;services.samba = {
  enable = true;
  extraConfig = &#x27;&#x27;
    hosts allow = 192.168.1. 127.0.0.1 localhost
  &#x27;&#x27;;
  shares = {
    samba = {
      path = &amp;quot;/home/vini/smb&amp;quot;;
      &amp;quot;read only&amp;quot; = &amp;quot;no&amp;quot;;
    };
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For some reason, samba gives &amp;quot;read only drive&amp;quot; errors if the share and
directory name are the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Register a samba user:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;smbpasswd -a &amp;lt;samba_user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now whenever you need to access your files, just log in using this user.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/setting-zfs-mirrors-up-in-nixos.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/games-that-i-like.html</id>
      <title>Games that I like</title>
      <updated>2022-09-07T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#colony-simulators&quot;&gt;
              &lt;h1 id=&quot;colony-simulators&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Colony Simulators&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;I really like colony simulators. The only thing with them is that they take
usually a lot of time (hours per run). Other than that, when played with the
right mindset, they can prove to be very fun and replayable.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#dwarf-fortress&quot;&gt;
              &lt;h2 id=&quot;dwarf-fortress&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Dwarf Fortress&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;No words to describe Dwarf Fortress. It is simply awesome. You can do all sorts
of stuff and all the game simulates an incredible amount of stuff, giving a lot
of immersion. The only sad part is that currently it becomes slow pretty fast
due to running on a single thread and has a pretty poor user interface.
Hopefully the Steam version that is coming will fix these problems.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#rimworld&quot;&gt;
              &lt;h2 id=&quot;rimworld&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Rimworld&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Pretty fun overall, seems a better version of Dwarf Fortress in some points but
lacks on a lot of others. It has much less content and does not have multiple Z
layers, but its user interface and gameplay are much better than DF.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#roguelikes&quot;&gt;
              &lt;h1 id=&quot;roguelikes&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Roguelikes&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Roguelike games really amuse me with all of their replayability and gameplay
style. This section will not differentiate from &lt;em&gt;roguelike&lt;/em&gt; and &lt;em&gt;roguelite&lt;/em&gt;, and
games from both categories might be present in here.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#slay-the-spire&quot;&gt;
              &lt;h2 id=&quot;slay-the-spire&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Slay the Spire&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;This game makes me so happy. I never stopped to play games such as hearthstone,
and simply ignored the existence of &lt;em&gt;Gwent&lt;/em&gt; when playing &lt;em&gt;The Witcher&lt;/em&gt;, but Slay
the Spire really caught my attention. It is very fun to play, and requires a
nice amount of strategy when planning builds, fighting or even choosing your
paths and making choices in events.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#faster-than-light-ftl&quot;&gt;
              &lt;h2 id=&quot;faster-than-light-ftl&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Faster than Light (FTL)&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;FTL is simply awesome. It has a &lt;strong&gt;Slay the Spire&lt;/strong&gt;-like map navigation,
containing a galaxy map in which you travel and face different events and also
has a realtime action combat between starships. It is really fun to battle
starships and repair yours during combat, while planning upgrades to your
starship on the long run.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#noita&quot;&gt;
              &lt;h2 id=&quot;noita&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Noita&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Noita is a very uncommon game, it features a roguelike perma-death mechanic, has
the awesome feature of &amp;quot;wand crafting&amp;quot; and is non-linear, you don&#x27;t just have a
single goal or boss for the game, you can explore secret areas, go to parallel
worlds or kill secret bosses.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#multiplayer-shooters&quot;&gt;
              &lt;h1 id=&quot;multiplayer-shooters&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Multiplayer Shooters&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;While I like nice and comfy indie games, most of my friends do not. So when I
play something with them, it usually ends up being something such as &lt;strong&gt;CSGO&lt;/strong&gt;,
&lt;strong&gt;Rainbow Six Siege&lt;/strong&gt; or &lt;strong&gt;COD Warzone&lt;/strong&gt;. I personally find these games funny if
played casually, but usually they have pretty toxic playerbases.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/games-that-i-like.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/2022-reading-list.html</id>
      <title>2022 Reading List</title>
      <updated>2022-07-24T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#elixir&quot;&gt;
              &lt;h1 id=&quot;elixir&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Elixir&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[X] Elixir in Action (ISBN: 9781617295027)&lt;/li&gt;
&lt;li&gt;[ ] Designing Elixir Systems with OTP (Reading) (ISBN: 9781680506617)&lt;/li&gt;
&lt;li&gt;[X] Concurrent Data Processing in Elixir (ISBN: 9781680508192)&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#distributed-systems&quot;&gt;
              &lt;h1 id=&quot;distributed-systems&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Distributed Systems&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Designing Data Intensive Applications (ISBN: 9781449373320)&lt;/li&gt;
&lt;li&gt;[X] Understanding Distributed Systems (ISBN: 9781838430207)&lt;/li&gt;
&lt;li&gt;[ ] The Art of Immutable Architecture (ISBN: 9781484259542)&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#databases&quot;&gt;
              &lt;h1 id=&quot;databases&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Databases&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[X] NoSQL Distilled (ISBN: 9780321826626)&lt;/li&gt;
&lt;li&gt;[ ] Database Internals (Reading) (ISBN:  9781492040347)&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#software-engineering&quot;&gt;
              &lt;h1 id=&quot;software-engineering&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Software Engineering&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[ ] The Clean Coder (ISBN: 9780137081073)&lt;/li&gt;
&lt;li&gt;[ ] The Programmer&#x27;s Brain (Reading) (ISBN: 9781617298677)&lt;/li&gt;
&lt;li&gt;[ ] Structure and Interpretation of Computer Programs (ISBN: 9780262510875)&lt;/li&gt;
&lt;li&gt;[ ] Seven Languages in Seven Weeks (ISBN: 9781934356593)&lt;/li&gt;
&lt;li&gt;[X] A Philosophy of Software Design (ISBN: 9781732102200)&lt;/li&gt;
&lt;li&gt;[ ] Working Effectively with Legacy Code (ISBN: 9780131177055)&lt;/li&gt;
&lt;li&gt;[ ] Software Foundations (Volume 1)&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#algorithms&quot;&gt;
              &lt;h1 id=&quot;algorithms&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Algorithms&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Grokking Algorithms (ISBN: 9781617292231)&lt;/li&gt;
&lt;li&gt;[ ] Algorithms Illuminated (ISBN: 9780999282908)&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href=&quot;https://cs.uwaterloo.ca/~plragde/flaneries/FDS&quot;&gt;Functional Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#literature&quot;&gt;
              &lt;h1 id=&quot;literature&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Literature&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;[X] Fahrenheit 451 (ISBN: 9788525052247)&lt;/li&gt;
&lt;li&gt;[X] 1984 (ISBN: 9788535914849)&lt;/li&gt;
&lt;li&gt;[X] Brave New World (ISBN: 9780060850524)&lt;/li&gt;
&lt;li&gt;[ ] The Great Gatsby (ISBN: 9798745274824)&lt;/li&gt;
&lt;li&gt;[ ] If on a Winter&#x27;s Night A Traveler (ISBN: 9780156439619)&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/2022-reading-list.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/using-a-kindle-in-the-digital-age.html</id>
      <title>Using a Kindle in the Digital Age</title>
      <updated>2022-07-24T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;In the last Amazon Prime Day, I&#x27;ve bought a &lt;em&gt;10th Generation Kindle&lt;/em&gt;. Before
that, I would say I preferred downloading and reading PDFs in my personal
computer instead of say, having a Kindle. After first using one it completely
blew my mind how cool the it actually is.&lt;/p&gt;
&lt;p&gt;The fact that it&#x27;s a simple e-book reader means that it does its job, and does
it really well. It offers a nice reading experience, high battery lifetime, the
10th gen ones have embedded light for dark environments and the most important:
It&#x27;s just a reading tool. Even though we live our overconnected lives in this
world, there are no distracting notifications or the possibility of opening some
random app to waste time when you&#x27;re using a Kindle.&lt;/p&gt;
&lt;p&gt;Having acquired a Kindle really made me enjoy reading a lot more. And now I
really feel like I &lt;strong&gt;want&lt;/strong&gt; to read books instead of wasting time doing
activities such as using the cellphone in bed.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/using-a-kindle-in-the-digital-age.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/installing-armbian-into-an-old-tv-box.html</id>
      <title>Installing Armbian into an old TV Box</title>
      <updated>2022-07-24T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Recently I&#x27;ve found a rather old unused TV Box and decided to install Armbian in
it to power my homelab (or roomlab, actually).&lt;/p&gt;
&lt;p&gt;The box that I have here is a Nexbox A95X. &lt;a href=&quot;https://www.youtube.com/watch?v=F2xv7kPNeEU&quot;&gt;This video&lt;/a&gt;
explains pretty much well what you should do in order to install Armbian on
yours. But I ran into some problems when trying it in my &lt;strong&gt;A95X-B7N&lt;/strong&gt; model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the video, when the &lt;code&gt;extlinux/extlinux.conf&lt;/code&gt; file is being edited, I had to
uncomment the &lt;code&gt;meson-gxl-s905x-p212.dtb&lt;/code&gt; instead of the &lt;code&gt;meson-gxm-q200.dtb&lt;/code&gt;
FTD directive.&lt;/li&gt;
&lt;li&gt;Wi-Fi is not working. From the video comments, it appears that installing
other versions than &lt;em&gt;bullseye&lt;/em&gt; might make Wi-Fi work.&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://users.armbian.com/balbes150/arm-64/&quot;&gt;Armbian images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/installing-armbian-into-an-old-tv-box.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/documenting-stuff.html</id>
      <title>Documenting Stuff</title>
      <updated>2022-07-24T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Recently I&#x27;ve been thinking about why usually my projects or codebases at work
doesn&#x27;t have per-function/class documentation or type specs. This seems tricky
to answer: we just need to write above the function what it does, right? So why
is this not happening? I personally don&#x27;t know. I want to read more about
documentation per se to have a more solid base on the subject, but right now
thinking about it we probably spend much more time tweaking and reading our
functions than we&#x27;d spent adding documentation to it.&lt;/p&gt;
&lt;p&gt;I&#x27;m now planning to code in a more thoughtful way and try to always document my
code when relevant, e.g: public interface of Elixir modules.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;defmodule MyModule do
  @moduledoc &amp;quot;This modules explains how to properly document Elixir APIs&amp;quot;

  @spec public_api :: String.t()
  @doc &amp;quot;Returns a string that ensures this function is documented.&amp;quot;
  def public_api do
    secret_function()
    &amp;quot;hey, I&#x27;m documented!&amp;quot;
  end

  # This doesn&#x27;t need any comments, since it&#x27;s
  # private API subject to change
  defp secret_function do
    nil
  end
end
&lt;/code&gt;&lt;/pre&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/documenting-stuff.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/the-dactyl-manuform-experience.html</id>
      <title>The Dactyl Manuform Experience</title>
      <updated>2022-07-24T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Around April this year I&#x27;ve started getting crazy about mechanical ergonomic
split keyboards. After a lot of (over)thinking, I&#x27;ve decided to go with a Dactyl
Manuform Mini 5x6 over the original Manuform. Its thumb cluster just seems
better overall, most of the keys in the original&#x27;s thumb cluster seem very
hard/painful to reach.&lt;/p&gt;
&lt;p&gt;After buying some &lt;em&gt;blank white PBT keycaps&lt;/em&gt; and &lt;em&gt;70 Gateron Milky Yellow&lt;/em&gt; switches
from AliExpress, waiting a month for them to arrive and printing the case at the
local university, I&#x27;ve assembled the board with a total cost of around $70
dollars, much cheaper than the &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;ErgoDox&lt;/a&gt; that I was
considering before, which would easily cost more than 500$ after taxes in Brazil.&lt;/p&gt;
&lt;p&gt;Another unique benefit of building your own keyboard is that you can use &lt;a href=&quot;https://qmk.fm&quot;&gt;QMK&lt;/a&gt;, which allows you to write the firmware for your own keyboard easily. Thus making your keybinds and macros portable between different operational systems.&lt;/p&gt;
&lt;p&gt;After two months of use, the keyboard is still holding strong and is very comfortable to type with. 10/10 would recommend.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/the-dactyl-manuform-experience.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/introduction.html</id>
      <title>Introduction</title>
      <updated>2022-05-17T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Currently where I work, we get the Visual Studio Enterprise (MPN) subscription,
that gives us 150$ monthly Azure credits, I&#x27;ll use these credits to tinker with
different stuff involving cloud computing and post some notes about them here.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/introduction.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/unturned-server-saga.html</id>
      <title>Unturned Server Saga</title>
      <updated>2022-05-15T00:00:00+00:00</updated>
      <content type="html">
        &lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#intro&quot;&gt;
              &lt;h1 id=&quot;intro&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Intro&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Some years ago I used to have a lot of fun in weekends with some friends playing &lt;a href=&quot;https://store.steampowered.com/app/304930/Unturned/&quot;&gt;Unturned&lt;/a&gt;. It&#x27;s a really funny game that I like to call the &amp;quot;poor man&#x27;s Rust&amp;quot;, cause it&#x27;s free and has an incredibly funny and rust-like mechanic in PVP.
I&#x27;ve always used to say to them that some day I would host an Unturned server
and we would have a lot of fun playing and managing it. Since I&#x27;ve got some spare Azure credits, why not hosting one in some port of my virtual machine?&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#hosting&quot;&gt;
              &lt;h1 id=&quot;hosting&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Hosting&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#simple-setup&quot;&gt;
              &lt;h2 id=&quot;simple-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Simple Setup&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;For a simple setup, you can follow &lt;a href=&quot;https://blog.yat1ma30.com/posts/host-dedicated-unturned-server&quot;&gt;this guide&lt;/a&gt; and then just use the &lt;code&gt;ServerHelper.sh&lt;/code&gt; script inside the game&#x27;s folder to start your server.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#hosting-more-than-one-server-in-the-same-host&quot;&gt;
              &lt;h2 id=&quot;hosting-more-than-one-server-in-the-same-host&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Hosting more than one server in the same host&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;If you want a fancier setup to do something like tinkering and restarting a second server while people play at your main one, you will need the following scripts:&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#start-sh&quot;&gt;
              &lt;h3 id=&quot;start-sh&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        start.sh&lt;/h3&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$unturned_dir = ~/unturned

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`dirname $0`/Unturned_Headless_Data/Plugins/x86_64/
cp -f $unturned_dir/linux64/steamclient.so $unturned_dir/Unturned_Headless_Data/Plugins/x86_64/steamclient.so

# ~/steamcmd/steamcmd.sh +login anonymous +force_install_dir $unturned_dir +app_update 1110390 validate +exit
mkdir -p $unturned_dir/linux64
yes | cp -rf ~/steamcmd/linux64/steamclient.so $unturned_dir
yes | cp -rf ~/steamcmd/linux64/steamclient.so $unturned_dir/linux64/

# Terminal mode compatible with -logfile 2&amp;gt;&amp;amp;1 IO.
export TERM=xterm

# Run the server binary.
# -batchmode and -nographics are Unity player arguments.
# -logfile 2&amp;gt;&amp;amp;1 can be used to pipe IO to/from the terminal.
# &amp;quot;$@&amp;quot; appends any command-line arguments passed to this script.
./Unturned_Headless.x86_64 -batchmode -nographics -ThreadedConsole &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#update-sh&quot;&gt;
              &lt;h3 id=&quot;update-sh&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        update.sh&lt;/h3&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;md5sum ~/steamcmd/linux32/steamclient.so
md5sum ~/steamcmd/linux64/steamclient.so

mkdir -p ~/steamcmd/
cd ~/steamcmd/
curl -sqL &amp;quot;https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz&amp;quot; | tar zxvf -
chmod +x steamcmd.sh
./steamcmd.sh +quit

# Fix libraries
sudo rm -fv /lib/steamclient.so
sudo rm -fv /lib64/steamclient.so
sudo ln -s ~/steamcmd/linux32/steamclient.so /lib/steamclient.so
sudo ln -s ~/steamcmd/linux64/steamclient.so /lib64/steamclient.so

md5sum ~/steamcmd/linux32/steamclient.so
md5sum ~/steamcmd/linux64/steamclient.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are based on the scripts shared in &lt;a href=&quot;https://github.com/SmartlyDressedGames/Unturned-3.x-Community/issues/1622#issuecomment-640060882&quot;&gt;this commentary&lt;/a&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#server-configuration&quot;&gt;
              &lt;h1 id=&quot;server-configuration&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Server Configuration&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#workshop-mods&quot;&gt;
              &lt;h2 id=&quot;workshop-mods&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Workshop Mods&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Adding mods is as simple as editing &lt;code&gt;WorkshopDownloaderConfig.json&lt;/code&gt; and adding the mods&#x27; ids (you can copy them from the URL) and pasting them inside the &lt;code&gt;File_IDs&lt;/code&gt; array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;File_IDs&amp;quot;: [],
  &amp;quot;Ignore_Children_File_IDs&amp;quot;: [],
  &amp;quot;Query_Cache_Max_Age_Seconds&amp;quot;: 600,
  &amp;quot;Max_Query_Retries&amp;quot;: 2,
  &amp;quot;Use_Cached_Downloads&amp;quot;: true,
  &amp;quot;Should_Monitor_Updates&amp;quot;: true,
  &amp;quot;Shutdown_Update_Detected_Timer&amp;quot;: 600,
  &amp;quot;Shutdown_Update_Detected_Message&amp;quot;: &amp;quot;Workshop file update detected, shutdown in: {0}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#rocket&quot;&gt;
              &lt;h2 id=&quot;rocket&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Rocket&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Rocket gives you a really nice framework to setup command permissions, server configurations and others. In order to add it to your game, you should move the Rocket assets into the &lt;code&gt;Modules&lt;/code&gt; folder in your game root directory.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#rocket-plugins&quot;&gt;
              &lt;h2 id=&quot;rocket-plugins&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Rocket Plugins&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;In order to add Rocket plugins to your server, you need to simply download the DLLs from the internet or compile them yourself using Visual Studio. Usually you&#x27;ll be able to find the DLLs if you dig a bit deeper (checking repository issues, other branches) and then you just need to move these to the &lt;code&gt;Rocket/Plugins&lt;/code&gt; folder inside your server directory.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#backups&quot;&gt;
              &lt;h1 id=&quot;backups&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Backups&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;I wanted to have my server saved in an interval of X minutes in a cron, so I can
have different versions of it saved as the time goes.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#local-backups&quot;&gt;
              &lt;h2 id=&quot;local-backups&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Local backups&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;This version saves the zipped files to a folder called &lt;code&gt;Backups&lt;/code&gt; inside the
server folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;import zipfile
import sys
import datetime
import calendar
import logging
import os

TO_SAVE = [
    &amp;quot;Rocket&amp;quot;,
    &amp;quot;Bundles&amp;quot;,
    &amp;quot;Level&amp;quot;,
    &amp;quot;Maps&amp;quot;,
    &amp;quot;Server&amp;quot;,
    &amp;quot;Players&amp;quot;,
    &amp;quot;Unturned_Headless_Data&amp;quot;,
    &amp;quot;Config.json&amp;quot;,
    &amp;quot;WorkshopDownloadConfig.json&amp;quot;,
]
SERVER_FOLDER_PATH = sys.argv[1]
BACKUP_FOLDER_PATH = f&amp;quot;{SERVER_FOLDER_PATH}/Backups&amp;quot;

if not os.path.exists(BACKUP_FOLDER_PATH):
    logging.info(f&amp;quot;directory {BACKUP_FOLDER_PATH} does not exist: creating it now&amp;quot;)
    os.makedirs(BACKUP_FOLDER_PATH)

try:
    date = datetime.datetime.utcnow()
    utc_time = calendar.timegm(date.utctimetuple())

    with zipfile.ZipFile(f&amp;quot;{BACKUP_FOLDER_PATH}/{utc_time}.zip&amp;quot;, &#x27;w&#x27;) as zip_file:
        for file_name in TO_SAVE:
            path = f&amp;quot;{SERVER_FOLDER_PATH}/{file_name}&amp;quot;

            if os.path.exists(path):
                if os.path.isdir(path):
                    for root, dirs, files in os.walk(path):
                        for file in files:
                            zip_file.write(os.path.join(root, file))
                else:
                    zip_file.write(path)
            else:
                logging.error(f&amp;quot;file or directory {file_name} does not exist in {SERVER_FOLDER_PATH}&amp;quot;)

except Exception as e:
    logging.error(f&amp;quot;Could not backup the server folder: {e}&amp;quot;)
    raise e
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#azure-blob-storage-backups&quot;&gt;
              &lt;h2 id=&quot;azure-blob-storage-backups&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Azure Blob Storage backups&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;I&#x27;ve also made a version of it that uploads the content to an Azure Blob
Storage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;import zipfile
import sys
import datetime
import calendar
import logging
import os
import io

from azure.storage.blob import BlobClient, ContainerClient

def send_to_blob_storage(connection_string, container, blob_name, data):
    container_client = ContainerClient.from_connection_string(conn_str=connection_string, container_name=container)

    if not container_client.exists():
        container_client.create_container()

    blob = BlobClient.from_connection_string(conn_str=connection_string, container_name=container, blob_name=blob_name)
    blob.upload_blob(data)

TO_SAVE = [
    &amp;quot;Rocket&amp;quot;,
    &amp;quot;Bundles&amp;quot;,
    &amp;quot;Level&amp;quot;,
    &amp;quot;Maps&amp;quot;,
    &amp;quot;Server&amp;quot;,
    &amp;quot;Players&amp;quot;,
    &amp;quot;Unturned_Headless_Data&amp;quot;,
    &amp;quot;Config.json&amp;quot;,
    &amp;quot;WorkshopDownloadConfig.json&amp;quot;,
]

CONNECTION_STRING = os.environ[&amp;quot;AZURE_BLOBSTORAGE_CONNECTION_STRING&amp;quot;]
CONTAINER = os.environ.get(&amp;quot;AZURE_BLOBSTORAGE_CONTAINER&amp;quot;) or &amp;quot;server-backups&amp;quot;
SERVER_FOLDER_PATH = sys.argv[1]
BACKUP_FOLDER_PATH = f&amp;quot;{SERVER_FOLDER_PATH}/Backups&amp;quot;
TEMP_FILE_PATH = &amp;quot;/tmp/server_backup&amp;quot;

if not os.path.exists(BACKUP_FOLDER_PATH):
    logging.info(f&amp;quot;directory {BACKUP_FOLDER_PATH} does not exist: creating it now&amp;quot;)
    os.makedirs(BACKUP_FOLDER_PATH)

try:
    with zipfile.ZipFile(TEMP_FILE_PATH, &amp;quot;w&amp;quot;) as zip_file:
        for file_name in TO_SAVE:
            path = f&amp;quot;{SERVER_FOLDER_PATH}/{file_name}&amp;quot;

            if os.path.exists(path):
                if os.path.isdir(path):
                    for root, dirs, files in os.walk(path):
                        for file in files:
                            zip_file.write(os.path.join(root, file))
                else:
                    zip_file.write(path)
            else:
                logging.error(f&amp;quot;file or directory {file_name} does not exist in {SERVER_FOLDER_PATH}&amp;quot;)

    date = datetime.datetime.utcnow()
    utc_time = calendar.timegm(date.utctimetuple())

    with open(TEMP_FILE_PATH, &amp;quot;rb&amp;quot;) as data:
        filename = f&amp;quot;{utc_time}.zip&amp;quot;
        send_to_blob_storage(CONNECTION_STRING, CONTAINER, filename, data)

    os.remove(TEMP_FILE_PATH)

    logging.info(f&amp;quot;Succesfully backed {SERVER_FOLDER_PATH} up!&amp;quot;)
except Exception as e:
    logging.error(f&amp;quot;Could not back {SERVER_FOLDER_PATH} up: {e}&amp;quot;)
    raise e
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This assumes the environment variable &lt;code&gt;AZURE_BLOBSTORAGE_CONNECTION_STRING&lt;/code&gt; is
set.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#ending&quot;&gt;
              &lt;h1 id=&quot;ending&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Ending&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;My first attempt of hosting a modded server last weekend ended up a failure.
Someone got really mad playing and DDOSed the server. The box actually handled
the load fine, but for some ironical reason, the server itself got banned from
BattleEye. From this I could see that hosting a modded Unturned server could
attract some very annoying playerbase. Since I don&#x27;t have and won&#x27;t have any
DDOS protection in this virtual machine, the approach I&#x27;m using now is to host a
full vanilla server and hopefully attract a &amp;quot;chadder&amp;quot; playerbase, and it&#x27;s
working actually well until this moment.&lt;/p&gt;
&lt;p&gt;I hope that you could learn some nice
tricks about hosting an Unturned server and may get attempted to host one too.&lt;/p&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/unturned-server-saga.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/distraction-free-setup-using-newsboat.html</id>
      <title>Distraction-Free Setup Using Newsboat</title>
      <updated>2022-01-08T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;Recently I got frustrated from getting distracted by recommendations while
watching YouTube videos or reading articles. The solution that I&#x27;ve found
(although not really new) is very elegant. In this post I&#x27;ll talk about it and
share system configuration snippets in the &lt;em&gt;Nix&lt;/em&gt; language.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Newsboat&lt;/em&gt; is a battle-tested RSS reader that works really well, you can define
and tag URLs of blogs you usually read and it will automatically search for new
posts and allows you to read them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mpv&lt;/strong&gt; is an awesome libre commandline video player, and it can also leverage
of &lt;strong&gt;youtube-dl&lt;/strong&gt; in order to play videos from YouTube, without the need of
opening it in your browser. &lt;strong&gt;glow&lt;/strong&gt; and &lt;strong&gt;pandoc&lt;/strong&gt; are combined to provide a
nice reading experience inside newsboat.&lt;/p&gt;
&lt;p&gt;The following is a sample &lt;em&gt;home-manager&lt;/em&gt; configuration to use &lt;em&gt;newsboat&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:
let
  mpv = &amp;quot;${pkgs.mpv}/bin/mpv&amp;quot;;
  glow = &amp;quot;${pkgs.glow}/bin/glow&amp;quot;;
  pandoc = &amp;quot;${pkgs.pandoc}/bin/pandoc&amp;quot;;
in
{
  programs.newsboat = {
    enable = true;
    autoReload = true;
    urls = [
      {
        url = &amp;quot;https://hnrss.org/newest&amp;quot;;
        title = &amp;quot;Hacker News&amp;quot;;
        tags = [ &amp;quot;tech&amp;quot; ];
      }

      # Reddit
      {
        url = &amp;quot;https://www.reddit.com/r/neovim/.rss&amp;quot;;
        title = &amp;quot;/r/neovim&amp;quot;;
        tags = [ &amp;quot;neovim&amp;quot; &amp;quot;reddit&amp;quot; ];
      }

      # Youtube
      {
        title = &amp;quot;Computerphile&amp;quot;;
        url = &amp;quot;https://www.youtube.com/feeds/videos.xml?channel_id=UC9-y-6csu5WGm29I7JiwpnA&amp;quot;;
        tags = [ &amp;quot;tech&amp;quot; &amp;quot;youtube&amp;quot; ];
      }
    ];
    extraConfig = &#x27;&#x27;
      # misc
      refresh-on-startup yes

      # display
      feed-sort-order unreadarticlecount-asc
      text-width      72

      # unbind keys
      unbind-key ENTER
      unbind-key j
      unbind-key k
      unbind-key J
      unbind-key K

      # bind keys - vim style
      bind-key j down
      bind-key k up
      bind-key l open
      bind-key h quit
      bind-key g home
      bind-key G end

      # colorscheme
      color listnormal        white black
      color listnormal_unread white black
      color listfocus         white black bold reverse
      color listfocus_unread  white black bold reverse
      color info              white black reverse bold
      color background        white black
      color article           white black

      html-renderer &amp;quot;${pandoc} --from=html -t markdown_github-raw_html&amp;quot;
      pager &amp;quot;${glow} --pager --width 72&amp;quot;

      # macros
      macro v set browser &amp;quot;${mpv} %u&amp;quot; ; open-in-browser ; set browser &amp;quot;firefox %u&amp;quot; -- &amp;quot;Open video on mpv&amp;quot;
    &#x27;&#x27;;
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having this setup, you can now just hover a YouTube entry in newsboat and press
&lt;code&gt;,v&lt;/code&gt;, and it will open a window playing the video.&lt;/p&gt;
&lt;p&gt;Now I can open newsboat whenever I want to check if there&#x27;s any new good media
to consume, without having to fire up a browser and opening something such as
YouTube or blogs.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://newsboat.org&quot;&gt;Newsboat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mpv-player/mpv&quot;&gt;mpv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot;&gt;youtube-dl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/distraction-free-setup-using-newsboat.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/nix-flakes-cheat-sheet.html</id>
      <title>Nix Flakes Cheat Sheet</title>
      <updated>2021-10-31T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#attributes&quot;&gt;
              &lt;h1 id=&quot;attributes&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Attributes&lt;/h1&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;# Commonly used options. For full list, check https://nixos.wiki/wiki/Flakes
{
  description: &amp;quot;&amp;quot;; # String describing the flake.

  inputs = { # Set containing all the dependencies of the flake.
    &amp;lt;flake&amp;gt;.url = &amp;quot;&amp;quot;; # URL pointing to the flake.
    &amp;lt;flake&amp;gt;.flake = true; # Set this to `false` if the repository is not a flake.
  };

  outputs = { # Set containing all the outputs of the flake.
    checks.&amp;lt;system&amp;gt;.&amp;lt;name&amp;gt; = {}; # Derivation describing a check ran by `nix flake check`.
    packages.&amp;lt;system&amp;gt;.&amp;lt;name&amp;gt; = {}; # Derivation which can be built with `nix build .#&amp;lt;name&amp;gt;`.
    defaultPackage.&amp;lt;system&amp;gt; = {}; # Derivation which is built by `nix build .`.
    apps.&amp;lt;system&amp;gt;.&amp;lt;name&amp;gt; = {}; # Set describing an app which can be run by `nix run .#&amp;lt;name&amp;gt;`;
    defaultApp.&amp;lt;system&amp;gt; = {}; # Derivation which is ran by `nix run .`.
    devShell.&amp;lt;system&amp;gt; = {}; # Used by `nix develop`
    devShells.&amp;lt;system&amp;gt;.&amp;lt;name&amp;gt; = {}; # Used by `nix develop .#&amp;lt;name&amp;gt;`
  };
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#commands&quot;&gt;
              &lt;h1 id=&quot;commands&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Commands&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nix develop&lt;/code&gt;: Enter the flake&#x27;s &lt;code&gt;devShell&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix build&lt;/code&gt;: Builds a derivation of the flake. If no derivation is
specified, it will try to build &lt;strong&gt;defaultPackage&lt;/strong&gt;. Specify which derivation
to build with &lt;code&gt;nix build .#&amp;lt;derivation&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix run&lt;/code&gt;: Builds a derivation and run the result binary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix flake check&lt;/code&gt;: Checks wether the flake builds and pass its tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix flake update [flake-url]&lt;/code&gt;: Update flake input. If &lt;code&gt;flake-url&lt;/code&gt; is not
specified update all the inputs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix flake info&lt;/code&gt;: Show info about the flake.&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#examples&quot;&gt;
              &lt;h1 id=&quot;examples&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Examples&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#plain-flake-with-package-devshell&quot;&gt;
              &lt;h2 id=&quot;plain-flake-with-package-devshell&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Plain Flake with Package + Devshell&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  description = &amp;quot;Single-platform flake without external dependencies&amp;quot;;

  outputs = { self, nixpkgs }:
    let 
      platform = &amp;quot;x86_64-linux&amp;quot;;
      pkgs = nixpkgs.legacyPackages.${platform};
    in {
    devShell.${platform} = pkgs.mkShell {
      buildInputs = with pkgs; [
        hello
      ];
    };
    defaultPackage.${platform} = pkgs.stdenv.mkDerivation {
      name = &amp;quot;dummy-derivation&amp;quot;;
      src = ./.;
      buildPhase = &amp;quot;echo &#x27;echo helloworld!&#x27; &amp;gt; program&amp;quot;;
      installPhase = &#x27;&#x27;
        mkdir -p $out/bin
        chmod +x ./program
        cp ./program $out/bin/dummy-derivation
      &#x27;&#x27;;
    };
  };
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#using-flake-utils&quot;&gt;
              &lt;h2 id=&quot;using-flake-utils&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Using Flake-Utils&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  description = &amp;quot;Multiplatform flake using flake-utils&amp;quot;;

  inputs.flake-utils.url = &amp;quot;github:numtide/flake-utils&amp;quot;;

  outputs = { self, flake-utils, nixpkgs }:
    flake-utils.lib.eachDefaultSystem (
      system: 
      let 
        pkgs = nixpkgs.legacyPackages.${system};
      in rec {
        devShell = pkgs.mkShell {
          buildInputs = with pkgs; [
            hello
          ];
        };
        defaultPackage = pkgs.stdenv.mkDerivation {
          name = &amp;quot;dummy-derivation&amp;quot;;
          src = ./.;
          buildPhase = &amp;quot;echo &#x27;echo helloworld!&#x27; &amp;gt; program&amp;quot;;
          installPhase = &#x27;&#x27;
            mkdir -p $out/bin
            chmod +x ./program
            cp ./program $out/bin/dummy-derivation
          &#x27;&#x27;;
        };
      }
    );
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Flakes&quot;&gt;NixOS Wiki page on Flakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Nix_command/flake&quot;&gt;NixOS Wiki page on Flakes Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/nix-flakes-cheat-sheet.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/setting-xserver-s-background-image.html</id>
      <title>Setting XServer&#x27;s Background Image</title>
      <updated>2021-10-30T00:00:00+00:00</updated>
      <content type="html">
        &lt;p&gt;If you have NixOS managing your XServer&#x27;s session you can easily set your
desktop background image by moving an image to &lt;code&gt;~/.background-image&lt;/code&gt;. If you
want to customize it furthermore, you can check the options available in the
&lt;code&gt;services.xserver.desktopManager.wallpaper&lt;/code&gt; namespace.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;man configuration.nix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/setting-xserver-s-background-image.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/kvm-gpu-passthrough.html</id>
      <title>KVM GPU Passthrough</title>
      <updated>2021-10-29T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#intro&quot;&gt;
              &lt;h1 id=&quot;intro&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Intro&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Recently I wanted to run a Windows virtual machine from NixOS that has access to
my GPU, mostly for gaming. This post will cover from enabling the necessary
kernel options and crafting a NixOS configuration to setting a Windows VM up and
making it able to use the GPU and other peripherals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This post is heavily based in &lt;a href=&quot;https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF&quot;&gt;this Arch Wiki article&lt;/a&gt; and is made
mostly as a guide to the author itself, although it is supposed to help any
people with a similar hardware setup trying to GPU passthrough on NixOS.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#hardware&quot;&gt;
              &lt;h1 id=&quot;hardware&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Hardware&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;This is my relevant hardware information for this post. It&#x27;s worth noting that I
only have &lt;strong&gt;one dedicated GPU&lt;/strong&gt; and &lt;strong&gt;one integrated GPU&lt;/strong&gt;. This post is mainly
meant for people in that same situation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: &lt;code&gt;NixOS 21.11 Porcupine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Motherboard: &lt;code&gt;GA-Gaming B8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CPU: &lt;code&gt;Intel i7-7700&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dedicated GPU: &lt;code&gt;NVIDIA GTX 1070&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integrated GPU: &lt;code&gt;Intel HD Graphics 630&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#requirements&quot;&gt;
              &lt;h1 id=&quot;requirements&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Requirements&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;You must have the &lt;code&gt;VT-D&lt;/code&gt; feature enabled inside your BIOS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware&quot;&gt;Your hardware must support IOMMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You must have a spare GPU device.&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#setup&quot;&gt;
              &lt;h1 id=&quot;setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Setup&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#isolating-the-gpu&quot;&gt;
              &lt;h2 id=&quot;isolating-the-gpu&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Isolating the GPU&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;In this section we will isolate the graphics card from the host so that we can
pass it through without any issues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This section assumes that you are going to passthrough a NVDIA GPU.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#setting-integrated-graphics-as-output&quot;&gt;
              &lt;h3 id=&quot;setting-integrated-graphics-as-output&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Setting Integrated Graphics as Output&lt;/h3&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This section is only valid if you only have only one &lt;strong&gt;GPU&lt;/strong&gt; and one
&lt;strong&gt;iGPU&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to make it work, you will have to go to your &lt;strong&gt;BIOS&lt;/strong&gt; settings and change
the default output display to the integrated graphics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caution: Be sure that you have a way to set the graphics output of your
motherboard as the input to your monitor, otherwise you will be locked without
graphics.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#enabling-iommu&quot;&gt;
              &lt;h3 id=&quot;enabling-iommu&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Enabling IOMMU&lt;/h3&gt;&lt;/a&gt;
&lt;p&gt;Inside your NixOS configuration, add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;boot.kernelParams = [
  # https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Setting_up_IOMMU
  &amp;quot;intel_iommu=on&amp;quot;
  &amp;quot;iommu=pt&amp;quot;

  # You might need this to avoid ASPM errors on boot
  &amp;quot;pcie_aspm=off&amp;quot;
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then rebuild and reboot your system.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#identifying-iommu-devices&quot;&gt;
              &lt;h3 id=&quot;identifying-iommu-devices&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Identifying IOMMU Devices&lt;/h3&gt;&lt;/a&gt;
&lt;p&gt;You can use the following snippet to identify your IOMMU devices:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;shopt -s nullglob
for d in /sys/kernel/iommu_groups/*/devices/*; do
    n=&#x27;&#x27;${d#*/iommu_groups/*}; n=&#x27;&#x27;${n%%/*}
    printf &amp;quot;IOMMU Group %s &amp;quot; &amp;quot;$n&amp;quot;
    lspci -nns &amp;quot;&#x27;&#x27;${d##*/}&amp;quot;
done;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This script requires the &lt;code&gt;lspci&lt;/code&gt; binary, available on Nix via the
&lt;code&gt;pciutils&lt;/code&gt; package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will be useful to get the ID of the graphics card in the next section.
Output example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;❯ list-iommu-devices  | grep GTX
IOMMU Group 1 01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1070] [10de:1b81] (rev a1)
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#configuring-the-nixos-host&quot;&gt;
              &lt;h3 id=&quot;configuring-the-nixos-host&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Configuring the NixOS Host&lt;/h3&gt;&lt;/a&gt;
&lt;p&gt;Add the following to your NixOS configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;# Enable VFIO and KVM kernel modules
boot.kernelModules = [
  &amp;quot;kvm-intel&amp;quot; # If using an AMD processor, use `kvm-amd`
  &amp;quot;vfio_pci&amp;quot;
  &amp;quot;vfio_iommu_type1&amp;quot;
  &amp;quot;vfio_virqfd&amp;quot;
  &amp;quot;vfio&amp;quot;
];

# We blacklist NVIDIA drivers from the kernel modules, ensuring the GPU
# doesn&#x27;t get loaded.
boot.blacklistedKernelModules = [
  &amp;quot;nvidia&amp;quot;
  &amp;quot;nouveau&amp;quot;
];

# Change the id below after `ids=` to the same of your GPU id
boot.extraModprobeConfig = &amp;quot;options vfio-pci ids=10de:1b81&amp;quot;;

# This might be necessary for you
boot.postBootCommands = &#x27;&#x27;
  DEVS=&amp;quot;0000:0f:00.0 0000:0f:00.1&amp;quot;
  for DEV in $DEVS; do
    echo &amp;quot;vfio-pci&amp;quot; &amp;gt; /sys/bus/pci/devices/$DEV/driver_override
  done
  modprobe -i vfio-pci
&#x27;&#x27;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now rebuild your configuration and reboot. You can test that the configuration
worked by running the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ dmesg | grep -i vfio
[    2.382403] VFIO - User Level meta-driver version: 0.3
[    2.391945] vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=none
[    2.403383] vfio_pci: add [10de:1b81[ffffffff:ffffffff]] class 0x000000/00000000
[    2.798115] vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=none
[  552.633505] vfio-pci 0000:01:00.0: enabling device (0000 -&amp;gt; 0003)
[  552.633809] vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x19@0x900
[ 1034.204707] vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x19@0x900
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should be similar to this (note the &lt;code&gt;add [10de:1b81...&lt;/code&gt; line).&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#installing-the-guest-os&quot;&gt;
              &lt;h2 id=&quot;installing-the-guest-os&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Installing the Guest OS&lt;/h2&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#nixos-virtualization-setup&quot;&gt;
              &lt;h3 id=&quot;nixos-virtualization-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        NixOS Virtualization Setup&lt;/h3&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;virtualisation.libvirtd = {
  enable = true;
  onBoot = &amp;quot;ignore&amp;quot;;
  onShutdown = &amp;quot;shutdown&amp;quot;;
  qemu = {
    ovmf.enable = true;
    runAsRoot = false;
  };
};

environment.systemPackages = with pkgs; [
  virt-manager
];
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#installation&quot;&gt;
              &lt;h3 id=&quot;installation&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Installation&lt;/h3&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;This part assumes you are going to install Windows inside the box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Download the Windows ISO of your liking (This post was tested using Windows 10).&lt;/li&gt;
&lt;li&gt;Move the ISO to &lt;code&gt;/var/lib/libvirt/images&lt;/code&gt; so that we don&#x27;t get permission
errors when launching the VM.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;virt-manager&lt;/code&gt; program.&lt;/li&gt;
&lt;li&gt;Create the VM normally until the Wizard asks you to set the guest name, then
check &lt;strong&gt;Customize before install&lt;/strong&gt; and proceed.&lt;/li&gt;
&lt;li&gt;Inside the &lt;strong&gt;Overview&lt;/strong&gt; section, change firmware to &lt;strong&gt;UEFI&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Inside the &lt;strong&gt;CPUs&lt;/strong&gt; section, change the CPU model to &lt;strong&gt;host-passthrough&lt;/strong&gt; (if it&#x27;s
not being shown uncheck &lt;strong&gt;Copy host CPU configuration&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Don&#x27;t add the PCI device yet, just start the Windows ISO and install it
through the &lt;code&gt;virt-viewer&lt;/code&gt; screen.&lt;/li&gt;
&lt;li&gt;After a successful installation, shut down the box and proceed.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If you fall inside an &amp;quot;UEFI Shell&amp;quot; when starting the VM for
installation, just type exit, navigate to &lt;strong&gt;Boot Manager&lt;/strong&gt; and boot into the
desired device.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#pci-passthrough&quot;&gt;
              &lt;h2 id=&quot;pci-passthrough&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        PCI Passthrough&lt;/h2&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove these virtual device sections in box&#x27;s the XML config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;channel type=&amp;quot;spicevmc&amp;quot;&amp;gt;
  ...
&amp;lt;/channel&amp;gt;
&amp;lt;input type=&amp;quot;tablet&amp;quot; bus=&amp;quot;usb&amp;quot;&amp;gt;
  ...
&amp;lt;/input&amp;gt;
&amp;lt;input type=&amp;quot;mouse&amp;quot; bus=&amp;quot;ps2&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;keyboard&amp;quot; bus=&amp;quot;ps2&amp;quot;/&amp;gt;
&amp;lt;graphics type=&amp;quot;spice&amp;quot; autoport=&amp;quot;yes&amp;quot;&amp;gt;
  ...
&amp;lt;/graphics&amp;gt;
&amp;lt;video&amp;gt;
  &amp;lt;model type=&amp;quot;qxl&amp;quot; .../&amp;gt;
  ...
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add this to avoid virtualization detection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;features&amp;gt;
  &amp;lt;hyperv&amp;gt;
    &amp;lt;vendor_id state=&#x27;on&#x27; value=&#x27;randomid&#x27;/&amp;gt;
  &amp;lt;/hyperv&amp;gt;
&amp;lt;/features&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;features&amp;gt;
  &amp;lt;kvm&amp;gt;
    &amp;lt;hidden state=&#x27;on&#x27;/&amp;gt;
  &amp;lt;/kvm&amp;gt;
&amp;lt;/features&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on your card, the GPU might detect it&#x27;s being virtualized and refuse
to run, triggering an &lt;code&gt;error 43&lt;/code&gt; (device unidentifiable) and leading to a
boring black screen. These snippets help to avoid this problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the box&#x27;s details, click &lt;strong&gt;Add Hardware&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add all the devices that are in the same &lt;a href=&quot;#enabling-iommu&quot;&gt;&lt;strong&gt;IOMMU&lt;/strong&gt;&lt;/a&gt; group of your GPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should now be able to start your box and change your monitor input to the
GPU output to check if it&#x27;s working. You should see your Windows box normally
on your screen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#keyboard-mouse-support&quot;&gt;
              &lt;h2 id=&quot;keyboard-mouse-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Keyboard/Mouse support&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Add to your box configuration, inside the &lt;code&gt;&amp;lt;devices&amp;gt;&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;input type=&amp;quot;evdev&amp;quot;&amp;gt;
  &amp;lt;source dev=&amp;quot;/dev/input/by-id/your-mouse-here&amp;quot; /&amp;gt;
&amp;lt;/input&amp;gt;
&amp;lt;input type=&amp;quot;evdev&amp;quot;&amp;gt;
  &amp;lt;source dev=&amp;quot;/dev/input/by-id/your-keyboard-here&amp;quot; grab=&amp;quot;all&amp;quot; repeat=&amp;quot;on&amp;quot;/&amp;gt;
&amp;lt;/input&amp;gt;
&amp;lt;input type=&amp;quot;mouse&amp;quot; bus=&amp;quot;virtio&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;keyboard&amp;quot; bus=&amp;quot;virtio&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#tips&quot;&gt;
              &lt;h3 id=&quot;tips&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Tips&lt;/h3&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;The devices must have &amp;quot;event&amp;quot; in their name.&lt;/li&gt;
&lt;li&gt;To check whether a device is the correct, &lt;code&gt;cat&lt;/code&gt; it and use the device, you
should see some gibberish being printed into the shell that &lt;code&gt;cat&lt;/code&gt; is
running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After setting this up, you should now be able to boot your VM and use your
keyboard and mouse inside it. In order to swap the keyboard and mouse between
host and the guest, press both &lt;strong&gt;left control&lt;/strong&gt; and &lt;strong&gt;right control&lt;/strong&gt; at the
same time.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#ivshmem-support&quot;&gt;
              &lt;h2 id=&quot;ivshmem-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        IVSHMEM Support&lt;/h2&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This section is only useful if you are going to use either &lt;a href=&quot;#scream--ivshmem&quot;&gt;Scream with IVSHMEM&lt;/a&gt; or &lt;a href=&quot;#looking-glass&quot;&gt;Looking Glass&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Inside your Windows box&#x27;s &lt;strong&gt;Device Manager&lt;/strong&gt;, go to &lt;strong&gt;System Devices&lt;/strong&gt; and select &lt;strong&gt;PCI standard RAM Controller&lt;/strong&gt;, then update it with &lt;a href=&quot;https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/upstream-virtio/&quot;&gt;RedHat&#x27;s IVSHMEM drivers&lt;/a&gt; (preferentially v0.1-161+).&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#kmonad-support&quot;&gt;
              &lt;h2 id=&quot;kmonad-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        KMonad Support&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;If you are using [[Elegant remappings with KMonad | KMonad]], you will notice
that it grabs your keyboard&#x27;s &lt;code&gt;udev&lt;/code&gt; device and it won&#x27;t output anything while
KMonad is actively using this keyboard. We can work around this by symlinking
the output device that KMonad creates into a known name that we can pass to our
VM.&lt;/p&gt;
&lt;p&gt;Inside my KMonad configuration, I have this relevant line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;output (uinput-sink &amp;quot;KMonad output&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets the name of the &lt;code&gt;udev&lt;/code&gt; device that KMonad creates. Having this
information, we can write an &lt;code&gt;udev&lt;/code&gt; rule that detects and symlinks this device
to a known path:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;services.udev.extraRules = &#x27;&#x27;
  # Symlink KMonad device
  ACTION==&amp;quot;add&amp;quot;, ATTRS{name}==&amp;quot;KMonad output&amp;quot;, SYMLINK+=&amp;quot;KMONAD_DEVICE&amp;quot;
&#x27;&#x27;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the symbolic link &lt;code&gt;/dev/KMONAD_DEVICE&lt;/code&gt;, which points to the dynamic
input that KMonad created we can provide it inside the VM&#x27;s XML file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;input type=&amp;quot;evdev&amp;quot;&amp;gt;
  &amp;lt;source dev=&amp;quot;/dev/KMONAD_DEVICE&amp;quot; grab=&amp;quot;all&amp;quot; repeat=&amp;quot;on&amp;quot;/&amp;gt;
&amp;lt;/input&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#audio-support&quot;&gt;
              &lt;h2 id=&quot;audio-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Audio Support&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;At this point you should already have a working Windows box which can see and
use your GPU, but it probably doesn&#x27;t have any sound output.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#scream-bridged-network&quot;&gt;
              &lt;h3 id=&quot;scream-bridged-network&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Scream + Bridged Network&lt;/h3&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#host-setup&quot;&gt;
              &lt;h4 id=&quot;host-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Host Setup&lt;/h4&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Set the network device to &lt;strong&gt;Bridge Device&lt;/strong&gt; and &lt;strong&gt;Device name&lt;/strong&gt; to your
virtual bridge, usually &lt;strong&gt;virbr0&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Inside your NixOS configuration, add:
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;systemd.user.services.scream-network = {
  enable = true;
  description = &amp;quot;Scream network&amp;quot;;
  serviceConfig = {
    ExecStart = &amp;quot;${pkgs.scream}/bin/scream -o pulse -i virbr0&amp;quot;;
    Restart = &amp;quot;always&amp;quot;;
  };
  wantedBy = [ &amp;quot;default.target&amp;quot; ];
  requires = [ &amp;quot;pipewire.service&amp;quot; ]; # Change to pulseaudio.service if using it
};
&lt;/code&gt;&lt;/pre&gt;
Then rebuild your system.&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#guest-setup&quot;&gt;
              &lt;h4 id=&quot;guest-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Guest Setup&lt;/h4&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Download and install &lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/#virtio-win-direct-downloads&quot;&gt;VirtIO drivers&lt;/a&gt; (&lt;a href=&quot;https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md&quot;&gt;virtio-win-iso&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Download and Install &lt;a href=&quot;https://github.com/duncanthrax/scream/releases/&quot;&gt;Scream&lt;/a&gt;.
&lt;blockquote&gt;
&lt;p&gt;Note: If you previously had setup &lt;a href=&quot;#scream--ivshmem&quot;&gt;Scream with IVSHMEM&lt;/a&gt;,
remember to remove the registry entry that makes Scream use IVSHMEM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should now be able to hear the guest&#x27;s audio on your host.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: For some reason, even though the &lt;code&gt;scream-network&lt;/code&gt; unit is running, the
box doesn&#x27;t output any sound until I restart the unit.
If that also happens to you, you can do so with: &lt;code&gt;systemctl --user restart scream-network.service&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#scream-ivshmem&quot;&gt;
              &lt;h3 id=&quot;scream-ivshmem&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Scream + IVSHMEM&lt;/h3&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Setting up Scream with &lt;strong&gt;IVSHMEM&lt;/strong&gt; is not the preferred way of doing it,
and probably will have more disadvantages than advantages.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#host-setup&quot;&gt;
              &lt;h4 id=&quot;host-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Host Setup&lt;/h4&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Add the following to your NixOS configuration and rebuild it:
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt; # Pipewire + pulseaudio support (you can also use just pulseaudio)
 services.pipewire = {
   enable = true;
   pulse.enable = true;
 };

# Scream
systemd.tmpfiles.rules = [
  &amp;quot;f /dev/shm/scream 0660 YOUR-USERNAME-HERE qemu-libvirtd -&amp;quot;
];

systemd.user.services.scream-ivshmem = {
  enable = true;
  description = &amp;quot;Scream IVSHMEM&amp;quot;;
  serviceConfig = {
    ExecStart = &amp;quot;${pkgs.scream}/bin/scream -o pulse -m /dev/shm/scream&amp;quot;;
    Restart = &amp;quot;always&amp;quot;;
  };
  wantedBy = [ &amp;quot;default.target&amp;quot; ];
  requires = [ &amp;quot;pipewire.service&amp;quot; ]; # Change to pulseaudio.service if using it
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Add Scream&#x27;s IVSHMEM configuration inside the &lt;code&gt;&amp;lt;devices&amp;gt;&lt;/code&gt; section in the XML
config:
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;shmem name=&amp;quot;scream&amp;quot;&amp;gt;
  &amp;lt;model type=&amp;quot;ivshmem-plain&amp;quot;/&amp;gt;
  &amp;lt;size unit=&amp;quot;M&amp;quot;&amp;gt;2&amp;lt;/size&amp;gt;
  &amp;lt;address type=&amp;quot;pci&amp;quot; domain=&amp;quot;0x0000&amp;quot; bus=&amp;quot;0x00&amp;quot; slot=&amp;quot;0x11&amp;quot; function=&amp;quot;0x0&amp;quot;/&amp;gt;
&amp;lt;/shmem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#guest-setup&quot;&gt;
              &lt;h4 id=&quot;guest-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Guest Setup&lt;/h4&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ivshmem-support&quot;&gt;Add IVSHMEM support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and Install &lt;a href=&quot;https://github.com/duncanthrax/scream/releases&quot;&gt;Scream Drivers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To make the driver use &lt;strong&gt;IVSHMEM&lt;/strong&gt;, run from an elevated shell: &lt;code&gt;REG ADD HKLM\SYSTEM\CurrentControlSet\Services\Scream\Options /v UseIVSHMEM /t REG_DWORD /d 2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If your box&#x27;s sound doesn&#x27;t work and the &lt;code&gt;scream-ivshmem&lt;/code&gt; unit is running,
check the note in end of the &lt;a href=&quot;#scream--bridged-network&quot;&gt;Scream + Bridged Network&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should now be able to hear the guest&#x27;s audio on your host.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#video-support&quot;&gt;
              &lt;h2 id=&quot;video-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Video support&lt;/h2&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#looking-glass&quot;&gt;
              &lt;h3 id=&quot;looking-glass&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Looking Glass&lt;/h3&gt;&lt;/a&gt;
&lt;p&gt;Looking Glass enables us to view our box graphical output from our XServer
session.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#host-setup&quot;&gt;
              &lt;h4 id=&quot;host-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Host Setup&lt;/h4&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add this to your NixOS configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;systemd.tmpfiles.rules = [
  &amp;quot;f /dev/shm/looking-glass 0660 YOUR-USERNAME-HERE qemu-libvirtd -&amp;quot;
];

environment.systemPackages = with pkgs; [
  looking-glass-client
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then rebuild your NixOS configuration and reboot the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Looking Glass&#x27; required configuration inside the &lt;code&gt;&amp;lt;devices&amp;gt;&lt;/code&gt; section in the box&#x27;s XML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;!--
You only need to add `&amp;lt;graphics&amp;gt;` and `&amp;lt;video&amp;gt;` if you are going to use the
spice server.

If you prefer swapping your keyboard and mouse between your host and the VM, 
just don&#x27;t add these two properties and launch `looking-glass-client` with the 
`-s no` flag.
--&amp;gt;
&amp;lt;graphics type=&amp;quot;spice&amp;quot; autoport=&amp;quot;yes&amp;quot;&amp;gt;
  &amp;lt;listen type=&amp;quot;address&amp;quot;/&amp;gt;
&amp;lt;/graphics&amp;gt;
&amp;lt;video&amp;gt;
  &amp;lt;model type=&amp;quot;none&amp;quot;/&amp;gt;
&amp;lt;/video&amp;gt;

&amp;lt;!-- Required --&amp;gt;
&amp;lt;shmem name=&#x27;looking-glass&#x27;&amp;gt;
  &amp;lt;model type=&#x27;ivshmem-plain&#x27;/&amp;gt;
  &amp;lt;size unit=&#x27;M&#x27;&amp;gt;32&amp;lt;/size&amp;gt;
&amp;lt;/shmem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&quot;https://looking-glass.io/docs/stable/install/#determining-memory&quot;&gt;Looking Glass&#x27; documentation&lt;/a&gt; in order to calculate how much memory you should give to Looking Glass (although 32M should handle most of the cases).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#guest-setup&quot;&gt;
              &lt;h4 id=&quot;guest-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Guest Setup&lt;/h4&gt;&lt;/a&gt;
&lt;p&gt;Inside your Windows box, you will need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ivshmem-support&quot;&gt;Add IVSHMEM support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://looking-glass.io/downloads&quot;&gt;Download and install &lt;code&gt;Looking Glass (host)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should now be able to run something like &lt;code&gt;looking-glass-client -s no -F -f /dev/shm/looking-glass&lt;/code&gt; on your host and see your guest graphical output.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The version of both your Looking Glass client and host applications must match.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#usb-support&quot;&gt;
              &lt;h2 id=&quot;usb-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        USB Support&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;If you need to use your USBs to wire up say a pendrive or an external HD, you
can easily plug them into your PC and pass them to your guest through the &lt;strong&gt;Add
Hardware&lt;/strong&gt; button inside the box&#x27;s details.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#partition-support&quot;&gt;
              &lt;h2 id=&quot;partition-support&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Partition Support&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;To passthorugh native partitions, create them on your host, then inside the &lt;strong&gt;Add
Hardware&lt;/strong&gt; menu, select &lt;strong&gt;Storage&lt;/strong&gt;, uncheck &lt;strong&gt;Create a disk image for the
virtual machine&lt;/strong&gt;, check &lt;strong&gt;Select or create custom storage&lt;/strong&gt; and add the path do
your partition inside the input (e.g: &lt;code&gt;/dev/sdb2&lt;/code&gt;).&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#performance-improvements&quot;&gt;
              &lt;h1 id=&quot;performance-improvements&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Performance Improvements&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#changing-number-of-cpu-cores&quot;&gt;
              &lt;h2 id=&quot;changing-number-of-cpu-cores&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Changing number of CPU cores&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;I&#x27;ve initially had some trouble with poor CPU performance, In order to improve
it I went into the &lt;strong&gt;CPUs&lt;/strong&gt; section inside the box&#x27;s details and checked
&lt;strong&gt;Manually set CPU topology&lt;/strong&gt;, from here you can increase the number of real
cores working with the VM.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#conclusion&quot;&gt;
              &lt;h1 id=&quot;conclusion&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Conclusion&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;While tinkering with and learning more about &lt;code&gt;VFIO&lt;/code&gt; and &lt;code&gt;QEMU&lt;/code&gt;/&lt;code&gt;libvirt&lt;/code&gt;, I&#x27;ve
managed to find an interesting virtual machine workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Audio: Scream + Bridged Network.&lt;/li&gt;
&lt;li&gt;Video: I&#x27;m using both the native GPU&#x27;s output and Looking Glass, depending on what
I&#x27;m doing.&lt;/li&gt;
&lt;li&gt;Inputs: I&#x27;m using both my keyboard and mouse as &lt;code&gt;evdev&lt;/code&gt; inputs, so I can swap
between the bare metal and the virtual machine. I&#x27;m also using KMonad&#x27;s output
device as my keyboard device.&lt;/li&gt;
&lt;li&gt;Storage: I&#x27;ve installed Windows in a small QEMU virtual disk inside my SSD for
faster initialization and added another QEMU virtual storage (which is inside
my HD) for storing data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The experience has been much greater than dual boot, since I can just open
Looking Glass and use Windows as if it were just another workspace in my window
manager. Now I can use both the OSses at the same time and don&#x27;t need to waste time
waiting for system reboots.&lt;/p&gt;
&lt;p&gt;I hope this post to be useful for whoever want to try a &lt;strong&gt;virtual machine + GPU
passthrough&lt;/strong&gt; workflow, be it another reader or myself trying to setup it again
after formatting the computer.&lt;/p&gt;
&lt;p&gt;This is how my final NixOS configuration looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:

let
  username = &amp;quot;vini&amp;quot;;
in
{
  boot = {
    kernelParams = [
      # https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Setting_up_IOMMU
      &amp;quot;intel_iommu=on&amp;quot;
      &amp;quot;iommu=pt&amp;quot;

      &amp;quot;pcie_aspm=off&amp;quot;
    ];

    kernelModules = [
      &amp;quot;kvm-intel&amp;quot;
      &amp;quot;vfio_pci&amp;quot;
      &amp;quot;vfio_iommu_type1&amp;quot;
      &amp;quot;vfio_virqfd&amp;quot;
      &amp;quot;vfio&amp;quot;
    ];

    blacklistedKernelModules = [
      &amp;quot;nvidia&amp;quot;
      &amp;quot;nouveau&amp;quot;
    ];

    extraModprobeConfig = &amp;quot;options vfio-pci ids=10de:1b81&amp;quot;;

    postBootCommands = &#x27;&#x27;
      DEVS=&amp;quot;0000:0f:00.0 0000:0f:00.1&amp;quot;

      for DEV in $DEVS; do
        echo &amp;quot;vfio-pci&amp;quot; &amp;gt; /sys/bus/pci/devices/$DEV/driver_override
      done
      modprobe -i vfio-pci
    &#x27;&#x27;;
  };

  services.udev.extraRules = &#x27;&#x27;
    # Symlink KMonad device
    ACTION==&amp;quot;add&amp;quot;, ATTRS{name}==&amp;quot;KMonad output&amp;quot;, SYMLINK+=&amp;quot;KMONAD_DEVICE&amp;quot;
  &#x27;&#x27;;

  services.pipewire = {
    enable = true;
    pulse.enable = true;
  };

  systemd.tmpfiles.rules = [
    &amp;quot;f /dev/shm/looking-glass 0660 ${username} qemu-libvirtd -&amp;quot;
  ];

  systemd.user.services.scream-network = {
    enable = true;
    description = &amp;quot;Scream network&amp;quot;;
    serviceConfig = {
      ExecStart = &amp;quot;${pkgs.scream}/bin/scream -o pulse -i virbr0&amp;quot;;
      Restart = &amp;quot;always&amp;quot;;
    };
    wantedBy = [ &amp;quot;default.target&amp;quot; ];
    requires = [ &amp;quot;pipewire.service&amp;quot; ];
  };

  virtualisation.libvirtd = {
    enable = true;
    onBoot = &amp;quot;ignore&amp;quot;;
    onShutdown = &amp;quot;shutdown&amp;quot;;
    qemu = {
      ovmf.enable = true;
      runAsRoot = false;
    };
  };

  environment.systemPackages = with pkgs; [
    virt-manager
    looking-glass-client
  ];
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF&quot;&gt;Arch Wiki&#x27;s PCI Passthrough Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://alexbakker.me/post/nixos-pci-passthrough-qemu-vfio.html&quot;&gt;Notes on PCI Passthrough on NixOS using QEMU and VFIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/duncanthrax/scream&quot;&gt;Scream Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forum.level1techs.com/t/nixos-vfio-pcie-passthrough/130916&quot;&gt;NixOS VFIO PCIe Passthrough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://looking-glass.io/docs/stable/install/&quot;&gt;Looking Glass Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://looking-glass.io/wiki/Using_Scream_over_LAN&quot;&gt;Using Scream over LAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forum.level1techs.com/t/sound-while-in-looking-glass-how-to-get-it-to-work-properly-in-november-2020/163448/7&quot;&gt;Sound while in Looking Glass: How to get it working&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/kvm-gpu-passthrough.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/hybrid-graphics-with-nvidia-prime.html</id>
      <title>Hybrid Graphics with NVIDIA PRIME</title>
      <updated>2021-10-27T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#table-of-contents&quot;&gt;
              &lt;h1 id=&quot;table-of-contents&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Table of Contents&lt;/h1&gt;&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#intro&quot;&gt;
              &lt;h1 id=&quot;intro&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Intro&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;I&#x27;ve spent some time trying to setup hybrid graphics on NixOS and managed to get
it up and running after adapting some of the content available at the NixOS Wiki.
This post will go through the necessary changes that I had to do in order to get
it working.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#author-s-setup&quot;&gt;
              &lt;h2 id=&quot;author-s-setup&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Author&#x27;s Setup&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;The relevant setup for this post includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: &lt;code&gt;NixOS 21.11 Porcupine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CPU: &lt;code&gt;Intel i7-7700&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GPU: &lt;code&gt;NVIDIA GTX 1070&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;iGPU: &lt;code&gt;Intel HD Graphics 630&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I have not tested this in other machines, maybe some changes will be
necessary for this to run in other kinds of hardware.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#nixos-configuration&quot;&gt;
              &lt;h1 id=&quot;nixos-configuration&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        NixOS Configuration&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Below is the necessary NixOS configuration to get it up and running. The
relevant parts will be covered next.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;let
  nvidia-offload = pkgs.writeShellScriptBin &amp;quot;nvidia-offload&amp;quot; &#x27;&#x27;
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __VK_LAYER_NV_optimus=NVIDIA_only
    exec -a &amp;quot;$1&amp;quot; &amp;quot;$@&amp;quot;
  &#x27;&#x27;;
in
{
  environment.systemPackages = [
    nvidia-offload
  ];

  services.xserver.config = &#x27;&#x27;
    # Integrated Intel GPU
    Section &amp;quot;Device&amp;quot;
      Identifier &amp;quot;iGPU&amp;quot;
      Driver &amp;quot;modesetting&amp;quot;
    EndSection

    # Dedicated NVIDIA GPU
    Section &amp;quot;Device&amp;quot;
      Identifier &amp;quot;dGPU&amp;quot;
      Driver &amp;quot;nvidia&amp;quot;
    EndSection

    Section &amp;quot;ServerLayout&amp;quot;
      Identifier &amp;quot;layout&amp;quot;
      Screen 0 &amp;quot;iGPU&amp;quot;
    EndSection

    Section &amp;quot;Screen&amp;quot;
      Identifier &amp;quot;iGPU&amp;quot;
      Device &amp;quot;iGPU&amp;quot;
    EndSection
  &#x27;&#x27;;

  services.xserver.videoDrivers = [ &amp;quot;nvidia&amp;quot; ];
  hardware.nvidia.prime = {
    offload.enable = true;
    intelBusId = &amp;quot;PCI:0:2:0&amp;quot;;
    nvidiaBusId = &amp;quot;PCI:1:0:0&amp;quot;;
  };
}
&lt;/code&gt;&lt;/pre&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#offload-script&quot;&gt;
              &lt;h2 id=&quot;offload-script&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Offload Script&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;let
  nvidia-offload = pkgs.writeShellScriptBin &amp;quot;nvidia-offload&amp;quot; &#x27;&#x27;
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __VK_LAYER_NV_optimus=NVIDIA_only
    exec -a &amp;quot;$1&amp;quot; &amp;quot;$@&amp;quot;
  &#x27;&#x27;;
in
{
  environment.systemPackages = [
    nvidia-offload
  ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This defines a small helper script that you will be using when you want to launch a program using the dedicated GPU.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#examples&quot;&gt;
              &lt;h3 id=&quot;examples&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Examples&lt;/h3&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Launching glxgears using the integrated GPU: &lt;code&gt;glxgears&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launching glxgears using the dedicated GPU: &lt;code&gt;nvidia-offload glxgears&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Extra: Launch Steam games using the GPU:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go at the game properties inside the Steam client&lt;/li&gt;
&lt;li&gt;Find &lt;code&gt;Launch Options&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it&#x27;s empty, change it to &lt;code&gt;nvidia-offload %command%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#xserver-configuration&quot;&gt;
              &lt;h2 id=&quot;xserver-configuration&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        XServer Configuration&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;services.xserver.config = &#x27;&#x27;
  # Integrated Intel GPU
  Section &amp;quot;Device&amp;quot;
    Identifier &amp;quot;iGPU&amp;quot;
    Driver &amp;quot;modesetting&amp;quot;
  EndSection

  # Dedicated NVIDIA GPU
  Section &amp;quot;Device&amp;quot;
    Identifier &amp;quot;dGPU&amp;quot;
    Driver &amp;quot;nvidia&amp;quot;
  EndSection

  Section &amp;quot;ServerLayout&amp;quot;
    Identifier &amp;quot;layout&amp;quot;
    Screen 0 &amp;quot;iGPU&amp;quot;
  EndSection

  Section &amp;quot;Screen&amp;quot;
    Identifier &amp;quot;iGPU&amp;quot;
    Device &amp;quot;iGPU&amp;quot;
  EndSection
&#x27;&#x27;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was necessary for me because the XServer was not recognizing
my graphics card, adding this extra piece of configuration solved it.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#nvidia-prime-configuration&quot;&gt;
              &lt;h2 id=&quot;nvidia-prime-configuration&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        NVIDIA + PRIME Configuration&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;services.xserver.videoDrivers = [ &amp;quot;nvidia&amp;quot; ];

hardware.nvidia.prime = {
  offload.enable = true;
  intelBusId = &amp;quot;PCI:0:2:0&amp;quot;;
  nvidiaBusId = &amp;quot;PCI:1:0:0&amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line here enables the &lt;strong&gt;proprietary NVIDIA drivers&lt;/strong&gt; in our system, this
line is very important, otherwise it will not work.&lt;/p&gt;
&lt;p&gt;Below is the NVIDIA PRIME configuration, in which we must enable &lt;code&gt;offload&lt;/code&gt; and
the both the &lt;code&gt;nvidiaBusId&lt;/code&gt; and &lt;code&gt;intelBusId&lt;/code&gt; of our GPUs. You can find out how to
get the bus ids by reading this &lt;a href=&quot;https://nixos.wiki/wiki/Nvidia#lspci&quot;&gt;relevant part of the NixOS Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In my system, I had to go to my BIOS settings and change the default
display output to &lt;code&gt;IGFX&lt;/code&gt; (Integrated Graphics) instead of directly using the
PCIE slot, otherwise my system wouldn&#x27;t detect the Intel HD device.&lt;/p&gt;
&lt;/blockquote&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#conclusion&quot;&gt;
              &lt;h1 id=&quot;conclusion&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Conclusion&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;After some tries I could get hybrid graphics working on NixOS in a quite easy
and reproducible way. This is a writeup meant to help other people with the same
issue and remember myself about it if I ever need to change it again.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Nvidia&quot;&gt;NixOS Wiki&#x27;s NVIDIA page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://download.nvidia.com/XFree86/Linux-x86_64/435.17/README/primerenderoffload.html&quot;&gt;NVIDIA&#x27;s PRIME Offloading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/hybrid-graphics-with-nvidia-prime.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/elegant-remappings-with-kmonad.html</id>
      <title>Elegant Remappings With KMonad</title>
      <updated>2021-10-26T00:00:00+00:00</updated>
      <content type="html">
        
          &lt;a class=&quot;no-underline&quot; href=&quot;#table-of-contents&quot;&gt;
              &lt;h1 id=&quot;table-of-contents&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Table of Contents&lt;/h1&gt;&lt;/a&gt;
&lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#intro&quot;&gt;
              &lt;h1 id=&quot;intro&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Intro&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;I&#x27;ve already had a lot of headaches trying to remap keys on Linux/NixOS. After
failing to achieve my goals with &lt;code&gt;xmodmap&lt;/code&gt; and others, I was sure there had to
be a better solution, and then I&#x27;ve found KMonad.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#what-is-kmonad&quot;&gt;
              &lt;h1 id=&quot;what-is-kmonad&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        What is KMonad?&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;KMonad is a multiplatform key remapping software which uses a lisp-like
declarative configuration language.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#why-use-kmonad&quot;&gt;
              &lt;h1 id=&quot;why-use-kmonad&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Why use KMonad?&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Once you get used to it, KMonad provides a pretty stable experience and a sweet
way to configure your key remappings.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#pros&quot;&gt;
              &lt;h2 id=&quot;pros&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Pros&lt;/h2&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;It works in a system-wide manner, so it doesn&#x27;t matter whether you are inside
a TTY rescuing your computer or relaxing inside your X session, your
key remappings will work.&lt;/li&gt;
&lt;li&gt;It&#x27;s pretty easy to define configurations for multiple keyboards and switch
between them.&lt;/li&gt;
&lt;li&gt;It works. Seriously. I cannot stress this enough, I&#x27;ve spent a lot of time
using programs to detect the keycodes that my keyboard was emitting and
writing some cryptic commands inside &lt;code&gt;xmodmap&lt;/code&gt;&#x27;s &lt;code&gt;.xkb&lt;/code&gt; files (and guess what,
it didn&#x27;t worked). With KMonad I literally draw my keyboard in ASCII
and change the characters&#x27; placement. And it works.&lt;/li&gt;
&lt;li&gt;It supports some fancy stuff such as macros, layers, composite characters, the
ability to run shell commands when pressing a key, etc...&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#cons&quot;&gt;
              &lt;h2 id=&quot;cons&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Cons&lt;/h2&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;It has a steep learning curve, and you probably will need to read their ~1000
lines lisp-like file tutorial to start using it.&lt;/li&gt;
&lt;li&gt;You still need to change a few lines in your configuration files in order to
make them run in another platform.&lt;/li&gt;
&lt;/ul&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#using-kmonad-with-nixos&quot;&gt;
              &lt;h1 id=&quot;using-kmonad-with-nixos&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Using KMonad with NixOS&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Since KMonad is still not available directly into NixOS as a system module, the
current way to use KMonad is through &lt;a href=&quot;https://github.com/kmonad/kmonad/blob/master/doc/installation.md#nixos&quot;&gt;their own NixOS module&lt;/a&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#the-nix-derivation&quot;&gt;
              &lt;h2 id=&quot;the-nix-derivation&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        The Nix Derivation&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;With these settings, KMonad should already start along with your NixOS system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{ pkgs, ... }:

let
  # The KMonad derivation (binary)
  kmonad = (import ../../pkgs/kmonad/derivation.nix) pkgs;
in
{
  imports = [
    # The KMonad NixOS module
    ./kmonad.nix
  ];

  services.kmonad = {
    enable = true;
    configfiles = [ ../../pkgs/kmonad/configs/ck61.kbd ];
    package = kmonad;
  };

  services.xserver = {
    xkbOptions = &amp;quot;compose:ralt&amp;quot;;
    layout = &amp;quot;us&amp;quot;;
  };

  users.extraUsers.your_username = {
    extraGroups = [ &amp;quot;input&amp;quot; &amp;quot;uinput&amp;quot; ];
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more details about this Nix snippet, check the KMonad section about Nix and
the docs of their NixOS module.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#the-kmonad-config&quot;&gt;
              &lt;h2 id=&quot;the-kmonad-config&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        The KMonad Config&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;My current keyboard is a &lt;code&gt;Motospeed CK61&lt;/code&gt;. It has a pretty good quality, but a
terrible usability. It has a confusing layer system, which kills any possibility
of using the arrow keys, some miscellaneous keys (home, end, page up, etc...),
or &lt;code&gt;F1-F12&lt;/code&gt; keys quickly. Also, it doesn&#x27;t have the tilde (yes, you&#x27;ve read that
right, there is not way to make a beautiful &lt;code&gt;~&lt;/code&gt; by pressing a key). I mostly use
KMonad to fix these keyboard quirks, this is a relevant part of my current configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(defsrc
  esc  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    &#x27;    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt cmp  rctl
)

(deflayer base
  grv   _    _    _    _    _    _    _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  esc   _    _    _    _    _    _    _    _    _    _    _    _
  _     _    _    _    _    _    _    _    _    _    _    _
  lmet  lctl _              _              lalt rctl @ext
)

(deflayer extra
  _    f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  _
  _    _    up   _    _    _    _    _    _    _    _    ssrq @pau _
  _    left down rght _    _    _    _    ins  home pgup pgdn _
  _    _    _    _    _    _    _    _    del  end  _    @mat
  _    _    _              _              _    _    @bas
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see how I use it to create a new layer to make arrows and others usable,
turn &lt;code&gt;right-alt&lt;/code&gt; into &lt;code&gt;left-alt&lt;/code&gt; (&lt;code&gt;ralt&lt;/code&gt; does not behave correctly when using
the &lt;code&gt;us(intl)&lt;/code&gt; layout), change &lt;code&gt;ctrl&lt;/code&gt; keys position, turn &lt;code&gt;caps lock&lt;/code&gt; into &lt;code&gt;esc&lt;/code&gt;
and add the tilde (grv) in place of the original &lt;code&gt;esc&lt;/code&gt;.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kmonad/kmonad&quot;&gt;KMonad&#x27;s GitHub Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kmonad/kmonad/blob/master/keymap/tutorial.kbd&quot;&gt;KMonad&#x27;s Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arcticlimer/dotfiles/blob/nixos/pkgs/kmonad/configs/ck61.kbd&quot;&gt;My KMonad configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/elegant-remappings-with-kmonad.html" rel="alternate" />
    </entry>
  
    <entry>
      <id>https://viniciusmuller.github.io/blog/reproducible-machine-learning-environment-with-nix.html</id>
      <title>Reproducible Machine Learning Environment With Nix</title>
      <updated>2021-01-09T00:00:00+00:00</updated>
      <content type="html">
        &lt;!-- raw HTML omitted --&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#intro&quot;&gt;
              &lt;h1 id=&quot;intro&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Intro&lt;/h1&gt;&lt;/a&gt;
&lt;p&gt;Recently I&#x27;ve been tinkering with machine learning, and wanted to have a local
reproducible &lt;em&gt;Python&lt;/em&gt; development environment which supports GPU. This post is meant to
share the resulting &lt;em&gt;Nix&lt;/em&gt; and &lt;em&gt;poetry&lt;/em&gt; configs.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#creating-the-environment&quot;&gt;
              &lt;h1 id=&quot;creating-the-environment&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Creating The Environment&lt;/h1&gt;&lt;/a&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#installing-tensorflow&quot;&gt;
              &lt;h2 id=&quot;installing-tensorflow&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Installing Tensorflow&lt;/h2&gt;&lt;/a&gt;
&lt;p&gt;Tensorflow with CUDA is the great star here, and you have 2 main ways of installing it using &lt;em&gt;Nix&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building &lt;code&gt;tensorflow-gpu&lt;/code&gt; from source, which uses a lot of computational
resources and time.&lt;/li&gt;
&lt;li&gt;Downloading the required &lt;strong&gt;CUDA&lt;/strong&gt; libraries and adding them to your
&lt;code&gt;$LD_LIBRARY_PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post will go with the latter.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#flake-nix&quot;&gt;
              &lt;h2 id=&quot;flake-nix&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        flake.nix&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-nix&quot;&gt;{
  description = &amp;quot;Tensorflow + CUDA development environment&amp;quot;;

  inputs.flake-utils.url = &amp;quot;github:numtide/flake-utils&amp;quot;;
  inputs.nixpkgs.url = &amp;quot;github:NixOS/nixpkgs&amp;quot;;
  inputs.poetry2nix.url = &amp;quot;github:nix-community/poetry2nix&amp;quot;;

  outputs = { self, nixpkgs, flake-utils, poetry2nix }:
    {
      # Nixpkgs overlay providing the application
      overlay = nixpkgs.lib.composeManyExtensions [
        poetry2nix.overlay
        (final: prev: {
          pythonEnv = prev.poetry2nix.mkPoetryEnv {
            projectDir = ./.;
            preferWheels = true;
          };
        })
      ];
    } // (flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ self.overlay ];
          config.allowUnfree = true;
        };
      in
      rec {
        devShell = pkgs.mkShell {
          name = &amp;quot;tf-dev-environment&amp;quot;;
          nativeBuildInputs = [ pkgs.poetry ];

          shellHook = &#x27;&#x27;
            export LD_LIBRARY_PATH=${pkgs.stdenv.cc.cc.lib}/lib:${pkgs.cudatoolkit_11}/lib:${pkgs.cudnn_cudatoolkit_11}/lib:${pkgs.cudatoolkit_11.lib}/lib:$LD_LIBRARY_PATH

            alias jupyter=&amp;quot;poetry run jupyter&amp;quot;
          &#x27;&#x27;;
        };
    }));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this assumes OpenGL libraries in your &lt;code&gt;$LD_LIBRARY_PATH&lt;/code&gt;. If you&#x27;re
using NixOS, you can set the &lt;code&gt;hardware.opengl.setLdLibraryPath&lt;/code&gt; option to
&lt;code&gt;true&lt;/code&gt;.  On other distros, you might be able to use &lt;em&gt;nixGL&lt;/em&gt; or set the path
manually, if it&#x27;s not already set.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#pyproject-toml&quot;&gt;
              &lt;h2 id=&quot;pyproject-toml&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        pyproject.toml&lt;/h2&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[tool.poetry]
name = &amp;quot;cuda-tensorflow&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
description = &amp;quot;&amp;quot;
authors = [&amp;quot;Your Name &amp;lt;you@example.com&amp;gt;&amp;quot;]

[tool.poetry.dependencies]
python = &amp;quot;&amp;gt;=3.9,&amp;lt;3.11&amp;quot;
tf-nightly = &amp;quot;^2.9.0-alpha.20220109&amp;quot;
keras = &amp;quot;^2.7.0&amp;quot;
numpy = &amp;quot;^1.22.0&amp;quot;
matplotlib = &amp;quot;^3.5.1&amp;quot;
jupyter = &amp;quot;^1.0.0&amp;quot;

[tool.poetry.dev-dependencies]

[build-system]
requires = [&amp;quot;poetry-core&amp;gt;=1.0.0&amp;quot;]
build-backend = &amp;quot;poetry.core.masonry.api&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice: Depending on when you find this, you might need to update these dependencies.&lt;/p&gt;

          &lt;a class=&quot;no-underline&quot; href=&quot;#resources&quot;&gt;
              &lt;h1 id=&quot;resources&quot; class=&quot;group relative&quot;&gt;
              &lt;span class=&quot;hidden group-hover:inline absolute -left-8&quot;&gt;#&lt;/span&gt;
        Resources&lt;/h1&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Tensorflow&quot;&gt;NixOS Wiki page on Tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nix-community/poetry2nix&quot;&gt;poetry2nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
      <link href="https://viniciusmuller.github.io/blog/reproducible-machine-learning-environment-with-nix.html" rel="alternate" />
    </entry>
  
</feed>